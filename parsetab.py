
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftorxorleftandleft<>left+-left*/rightuminusand assign ate de dif enquanto entao escreva faca false fim fimenquanto fimfuncao fimpara fimse funcao geq inicio leia leq not nr or para se senao string true var vartype xorportugol : func_list ';' inicio codeportugol : inicio codefunc_list : func\n                    | func_list ';' func func : funcao var '(' args ')' com_list ';' fimfuncao  code : s  code : code ';' s   s : comando\n              | fim ciclo : para var de e ate e faca com_list ';' fimpara ciclo : enquanto n faca com_list ';' fimenquanto comando : e\n                    | ciclo  comando : var assign e  comando : escreva '(' e_list ')'  comando : leia '(' var_list ')'  comando : vartype ':' var_list comando : se e entao com_list ';' senao com_list ';' fimsecomando : se e entao com_list ';' fimse com_list : comando\n                     | com_list ';' comando  e_list : e\n                   | e_list ',' e  e : var  e : '(' e ')'  e : b\n              | n\n              | string e : var '(' e_list ')'\n              | var '(' ')'  n : nr\n              | '-' e  %prec uminus   n : '(' n ')'  n : e '+' e\n              | e '-' e\n              | e '*' e\n              | e '/' e n : e '<' e\n              | e leq e\n              | e '>' e\n              | e geq e\n              | e '=' e\n              | e dif e b : f\n              | e or e\n              | e and e\n              | e xor e  f : true  f : false  f : not f  var_list : var\n                     | var_list ',' var  args :\n                 | var_list "
    
_lr_action_items = {'inicio':([0,6,],[3,31,]),'funcao':([0,6,],[5,5,]),'$end':([1,7,8,9,10,11,12,13,19,20,21,24,25,27,28,52,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,86,87,93,95,96,104,110,113,120,122,],[0,-2,-6,-8,-9,-12,-13,-24,-26,-27,-28,-44,-31,-48,-49,-24,-32,-50,-1,-7,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-14,-30,-25,-33,-51,-17,-29,-15,-16,-52,-19,-11,-18,-10,]),';':([2,4,7,8,9,10,11,12,13,19,20,21,24,25,27,28,32,52,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,86,87,93,95,96,98,99,101,104,108,110,111,113,115,117,119,120,122,],[6,-3,33,-6,-8,-9,-12,-13,-24,-26,-27,-28,-44,-31,-48,-49,-4,-24,-32,-50,33,-7,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-14,-30,-25,-33,-51,-17,-29,-15,-16,105,-20,107,-52,114,-19,-21,-11,118,-5,121,-18,-10,]),'fim':([3,31,33,],[10,10,10,]),'var':([3,5,15,18,22,23,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,53,54,59,62,88,89,90,94,97,102,105,106,107,109,114,116,118,121,],[13,30,52,52,56,52,52,13,13,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,86,86,52,86,13,52,13,52,104,13,13,52,13,13,13,13,13,13,]),'escreva':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'leia':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'vartype':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'se':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'(':([3,13,14,15,16,18,23,26,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[15,48,49,15,53,15,59,15,62,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,48,59,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'string':([3,15,18,23,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'para':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[22,22,22,22,22,22,22,22,22,22,22,22,22,]),'enquanto':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[23,23,23,23,23,23,23,23,23,23,23,23,23,]),'nr':([3,15,18,23,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'-':([3,11,13,15,18,19,20,21,23,24,25,26,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,88,89,90,93,94,100,102,103,105,106,107,109,112,114,116,118,121,],[26,38,-24,26,26,-26,-27,-28,26,-44,-31,26,-48,-49,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,38,-27,-24,38,-27,38,26,-32,-50,38,38,38,-34,-35,-36,-37,38,38,38,38,38,38,38,-30,38,-25,-33,26,26,26,-29,26,38,26,38,26,26,26,26,38,26,26,26,26,]),'true':([3,15,18,23,26,29,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'false':([3,15,18,23,26,29,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'not':([3,15,18,23,26,29,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'or':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[34,-24,-26,-27,-28,-44,-31,-48,-49,34,-27,-24,34,-27,34,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,34,-40,34,34,34,34,-30,34,-25,-33,-29,34,34,34,]),'and':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[35,-24,-26,-27,-28,-44,-31,-48,-49,35,-27,-24,35,-27,35,-32,-50,35,-46,35,-34,-35,-36,-37,-38,35,-40,35,35,35,35,-30,35,-25,-33,-29,35,35,35,]),'xor':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[36,-24,-26,-27,-28,-44,-31,-48,-49,36,-27,-24,36,-27,36,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,36,-40,36,36,36,36,-30,36,-25,-33,-29,36,36,36,]),'+':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[37,-24,-26,-27,-28,-44,-31,-48,-49,37,-27,-24,37,-27,37,-32,-50,37,37,37,-34,-35,-36,-37,37,37,37,37,37,37,37,-30,37,-25,-33,-29,37,37,37,]),'*':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[39,-24,-26,-27,-28,-44,-31,-48,-49,39,-27,-24,39,-27,39,-32,-50,39,39,39,39,39,-36,-37,39,39,39,39,39,39,39,-30,39,-25,-33,-29,39,39,39,]),'/':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[40,-24,-26,-27,-28,-44,-31,-48,-49,40,-27,-24,40,-27,40,-32,-50,40,40,40,40,40,-36,-37,40,40,40,40,40,40,40,-30,40,-25,-33,-29,40,40,40,]),'<':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[41,-24,-26,-27,-28,-44,-31,-48,-49,41,-27,-24,41,-27,41,-32,-50,41,41,41,-34,-35,-36,-37,-38,41,-40,41,41,41,41,-30,41,-25,-33,-29,41,41,41,]),'leq':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[42,-24,-26,-27,-28,-44,-31,-48,-49,42,-27,-24,42,-27,42,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,42,-40,42,42,42,42,-30,42,-25,-33,-29,42,42,42,]),'>':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[43,-24,-26,-27,-28,-44,-31,-48,-49,43,-27,-24,43,-27,43,-32,-50,43,43,43,-34,-35,-36,-37,-38,43,-40,43,43,43,43,-30,43,-25,-33,-29,43,43,43,]),'geq':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[44,-24,-26,-27,-28,-44,-31,-48,-49,44,-27,-24,44,-27,44,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,44,-40,44,44,44,44,-30,44,-25,-33,-29,44,44,44,]),'=':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[45,-24,-26,-27,-28,-44,-31,-48,-49,45,-27,-24,45,-27,45,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,45,-40,45,45,45,45,-30,45,-25,-33,-29,45,45,45,]),'dif':([11,13,19,20,21,24,25,27,28,50,51,52,55,57,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,93,100,103,112,],[46,-24,-26,-27,-28,-44,-31,-48,-49,46,-27,-24,46,-27,46,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,46,-40,46,46,46,46,-30,46,-25,-33,-29,46,46,46,]),'assign':([13,],[47,]),':':([17,],[54,]),')':([19,20,21,24,25,27,28,48,50,51,52,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,91,92,93,103,104,],[-26,-27,-28,-44,-31,-48,-49,80,83,84,-24,-32,-50,-53,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,93,-30,-22,95,-25,-33,96,-51,102,-54,-29,-23,-52,]),'entao':([19,20,21,24,25,27,28,52,55,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,93,],[-26,-27,-28,-44,-31,-48,-49,-24,88,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-30,-25,-33,-29,]),'faca':([19,20,21,24,25,27,28,52,57,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,93,112,],[-26,-27,-28,-44,-31,-48,-49,-24,90,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-30,-25,-33,-29,116,]),',':([19,20,21,24,25,27,28,52,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,92,93,103,104,],[-26,-27,-28,-44,-31,-48,-49,-24,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,94,-30,-22,94,-25,-33,97,-51,97,97,-29,-23,-52,]),'ate':([19,20,21,24,25,27,28,52,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,93,100,],[-26,-27,-28,-44,-31,-48,-49,-24,-32,-50,-45,-46,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-30,-25,-33,-29,106,]),'de':([56,],[89,]),'senao':([105,],[109,]),'fimse':([105,118,],[110,120,]),'fimenquanto':([107,],[113,]),'fimfuncao':([114,],[117,]),'fimpara':([121,],[122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'portugol':([0,],[1,]),'func_list':([0,],[2,]),'func':([0,6,],[4,32,]),'code':([3,31,],[7,63,]),'s':([3,31,33,],[8,8,64,]),'comando':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[9,9,9,99,99,99,111,111,99,111,99,111,111,]),'e':([3,15,18,23,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[11,50,55,58,60,11,11,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,81,50,11,100,11,103,11,11,112,11,11,11,11,11,11,]),'ciclo':([3,31,33,88,90,102,105,107,109,114,116,118,121,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'b':([3,15,18,23,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'n':([3,15,18,23,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[20,51,20,57,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,51,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'f':([3,15,18,23,26,29,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,88,89,90,94,102,105,106,107,109,114,116,118,121,],[24,24,24,24,24,61,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'e_list':([48,49,],[79,82,]),'var_list':([53,54,62,],[85,87,92,]),'args':([62,],[91,]),'com_list':([88,90,102,109,116,],[98,101,108,115,119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> portugol","S'",1,None,None,None),
  ('portugol -> func_list ; inicio code','portugol',4,'p_portugol','grammar.py',44),
  ('portugol -> inicio code','portugol',2,'p_portugol2','grammar.py',49),
  ('func_list -> func','func_list',1,'p_func_list','grammar.py',54),
  ('func_list -> func_list ; func','func_list',3,'p_func_list','grammar.py',55),
  ('func -> funcao var ( args ) com_list ; fimfuncao','func',8,'p_func','grammar.py',65),
  ('code -> s','code',1,'p_code1','grammar.py',74),
  ('code -> code ; s','code',3,'p_code2','grammar.py',79),
  ('s -> comando','s',1,'p_s','grammar.py',84),
  ('s -> fim','s',1,'p_s','grammar.py',85),
  ('ciclo -> para var de e ate e faca com_list ; fimpara','ciclo',10,'p_ciclo','grammar.py',90),
  ('ciclo -> enquanto n faca com_list ; fimenquanto','ciclo',6,'p_ciclo2','grammar.py',99),
  ('comando -> e','comando',1,'p_comando1','grammar.py',108),
  ('comando -> ciclo','comando',1,'p_comando1','grammar.py',109),
  ('comando -> var assign e','comando',3,'p_comando2','grammar.py',114),
  ('comando -> escreva ( e_list )','comando',4,'p_comando3','grammar.py',119),
  ('comando -> leia ( var_list )','comando',4,'p_comando4','grammar.py',124),
  ('comando -> vartype : var_list','comando',3,'p_comando5','grammar.py',129),
  ('comando -> se e entao com_list ; senao com_list ; fimse','comando',9,'p_comando6','grammar.py',136),
  ('comando -> se e entao com_list ; fimse','comando',6,'p_comando7','grammar.py',143),
  ('com_list -> comando','com_list',1,'p_com_list','grammar.py',150),
  ('com_list -> com_list ; comando','com_list',3,'p_com_list','grammar.py',151),
  ('e_list -> e','e_list',1,'p_e_list','grammar.py',160),
  ('e_list -> e_list , e','e_list',3,'p_e_list','grammar.py',161),
  ('e -> var','e',1,'p_e1','grammar.py',169),
  ('e -> ( e )','e',3,'p_e2','grammar.py',174),
  ('e -> b','e',1,'p_e3','grammar.py',179),
  ('e -> n','e',1,'p_e3','grammar.py',180),
  ('e -> string','e',1,'p_e3','grammar.py',181),
  ('e -> var ( e_list )','e',4,'p_e4','grammar.py',186),
  ('e -> var ( )','e',3,'p_e4','grammar.py',187),
  ('n -> nr','n',1,'p_n1','grammar.py',194),
  ('n -> - e','n',2,'p_n1','grammar.py',195),
  ('n -> ( n )','n',3,'p_n2','grammar.py',200),
  ('n -> e + e','n',3,'p_n3','grammar.py',205),
  ('n -> e - e','n',3,'p_n3','grammar.py',206),
  ('n -> e * e','n',3,'p_n3','grammar.py',207),
  ('n -> e / e','n',3,'p_n3','grammar.py',208),
  ('n -> e < e','n',3,'p_n4','grammar.py',213),
  ('n -> e leq e','n',3,'p_n4','grammar.py',214),
  ('n -> e > e','n',3,'p_n4','grammar.py',215),
  ('n -> e geq e','n',3,'p_n4','grammar.py',216),
  ('n -> e = e','n',3,'p_n4','grammar.py',217),
  ('n -> e dif e','n',3,'p_n4','grammar.py',218),
  ('b -> f','b',1,'p_b1','grammar.py',223),
  ('b -> e or e','b',3,'p_b1','grammar.py',224),
  ('b -> e and e','b',3,'p_b1','grammar.py',225),
  ('b -> e xor e','b',3,'p_b1','grammar.py',226),
  ('f -> true','f',1,'p_f1','grammar.py',234),
  ('f -> false','f',1,'p_f2','grammar.py',239),
  ('f -> not f','f',2,'p_f3','grammar.py',244),
  ('var_list -> var','var_list',1,'p_var_list','grammar.py',249),
  ('var_list -> var_list , var','var_list',3,'p_var_list','grammar.py',250),
  ('args -> <empty>','args',0,'p_args','grammar.py',259),
  ('args -> var_list','args',1,'p_args','grammar.py',260),
]
