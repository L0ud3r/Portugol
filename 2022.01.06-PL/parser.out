Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> s
Rule 2     code -> code ; s
Rule 3     ciclo -> para var de e ate e faca com_list ; fimpara
Rule 4     func -> funcao var ( args ) com_list ; fimfuncao
Rule 5     comando -> e
Rule 6     comando -> ciclo
Rule 7     comando -> var assign e
Rule 8     comando -> escreva ( e_list )
Rule 9     comando -> leia ( var_list )
Rule 10    comando -> vartype : var_list
Rule 11    comando -> se e entao com_list ; fimse
Rule 12    s -> func
Rule 13    s -> comando
Rule 14    s -> fim
Rule 15    e_list -> e
Rule 16    e_list -> e_list , e
Rule 17    n -> nr
Rule 18    n -> - e
Rule 19    n -> e + e
Rule 20    n -> e - e
Rule 21    n -> e * e
Rule 22    n -> e / e
Rule 23    b -> f
Rule 24    b -> e or e
Rule 25    b -> e and e
Rule 26    b -> e xor e
Rule 27    f -> true
Rule 28    f -> false
Rule 29    f -> not f
Rule 30    e -> var
Rule 31    e -> ( e )
Rule 32    e -> b
Rule 33    e -> n
Rule 34    e -> string
Rule 35    e -> var ( e_list )
Rule 36    e -> var ( )
Rule 37    com_list -> comando
Rule 38    com_list -> com_list ; comando
Rule 39    var_list -> var
Rule 40    var_list -> var_list , var
Rule 41    args -> <empty>
Rule 42    args -> var_list

Terminals, with rules where they appear

(                    : 4 8 9 31 35 36
)                    : 4 8 9 31 35 36
*                    : 21
+                    : 19
,                    : 16 40
-                    : 18 20
/                    : 22
:                    : 10
;                    : 2 3 4 11 38
and                  : 25
assign               : 7
ate                  : 3
de                   : 3
entao                : 11
error                : 
escreva              : 8
faca                 : 3
false                : 28
fim                  : 14
fimfuncao            : 4
fimpara              : 3
fimse                : 11
funcao               : 4
leia                 : 9
not                  : 29
nr                   : 17
or                   : 24
para                 : 3
se                   : 11
string               : 34
true                 : 27
var                  : 3 4 7 30 35 36 39 40
vartype              : 10
xor                  : 26

Nonterminals, with rules where they appear

args                 : 4
b                    : 32
ciclo                : 6
code                 : 2 0
com_list             : 3 4 11 38
comando              : 13 37 38
e                    : 3 3 5 7 11 15 16 18 19 19 20 20 21 21 22 22 24 24 25 25 26 26 31
e_list               : 8 16 35
f                    : 23 29
func                 : 12
n                    : 33
s                    : 1 2
var_list             : 9 10 40 42

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . s
    (2) code -> . code ; s
    (12) s -> . func
    (13) s -> . comando
    (14) s -> . fim
    (4) func -> . funcao var ( args ) com_list ; fimfuncao
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fim             shift and go to state 5
    funcao          shift and go to state 6
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    code                           shift and go to state 1
    s                              shift and go to state 2
    func                           shift and go to state 3
    comando                        shift and go to state 4
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 1

    (0) S' -> code .
    (2) code -> code . ; s

    ;               shift and go to state 25


state 2

    (1) code -> s .

    ;               reduce using rule 1 (code -> s .)
    $end            reduce using rule 1 (code -> s .)


state 3

    (12) s -> func .

    ;               reduce using rule 12 (s -> func .)
    $end            reduce using rule 12 (s -> func .)


state 4

    (13) s -> comando .

    ;               reduce using rule 13 (s -> comando .)
    $end            reduce using rule 13 (s -> comando .)


state 5

    (14) s -> fim .

    ;               reduce using rule 14 (s -> fim .)
    $end            reduce using rule 14 (s -> fim .)


state 6

    (4) func -> funcao . var ( args ) com_list ; fimfuncao

    var             shift and go to state 26


state 7

    (7) comando -> var . assign e
    (30) e -> var .
    (35) e -> var . ( e_list )
    (36) e -> var . ( )

    assign          shift and go to state 27
    or              reduce using rule 30 (e -> var .)
    and             reduce using rule 30 (e -> var .)
    xor             reduce using rule 30 (e -> var .)
    +               reduce using rule 30 (e -> var .)
    -               reduce using rule 30 (e -> var .)
    *               reduce using rule 30 (e -> var .)
    /               reduce using rule 30 (e -> var .)
    ;               reduce using rule 30 (e -> var .)
    $end            reduce using rule 30 (e -> var .)
    (               shift and go to state 28


state 8

    (31) e -> ( . e )
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 29
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 9

    (5) comando -> e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    ;               reduce using rule 5 (comando -> e .)
    $end            reduce using rule 5 (comando -> e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 10

    (6) comando -> ciclo .

    ;               reduce using rule 6 (comando -> ciclo .)
    $end            reduce using rule 6 (comando -> ciclo .)


state 11

    (8) comando -> escreva . ( e_list )

    (               shift and go to state 38


state 12

    (9) comando -> leia . ( var_list )

    (               shift and go to state 39


state 13

    (10) comando -> vartype . : var_list

    :               shift and go to state 40


state 14

    (11) comando -> se . e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 41
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 15

    (32) e -> b .

    or              reduce using rule 32 (e -> b .)
    and             reduce using rule 32 (e -> b .)
    xor             reduce using rule 32 (e -> b .)
    +               reduce using rule 32 (e -> b .)
    -               reduce using rule 32 (e -> b .)
    *               reduce using rule 32 (e -> b .)
    /               reduce using rule 32 (e -> b .)
    ;               reduce using rule 32 (e -> b .)
    $end            reduce using rule 32 (e -> b .)
    )               reduce using rule 32 (e -> b .)
    entao           reduce using rule 32 (e -> b .)
    ,               reduce using rule 32 (e -> b .)
    ate             reduce using rule 32 (e -> b .)
    faca            reduce using rule 32 (e -> b .)


state 16

    (33) e -> n .

    or              reduce using rule 33 (e -> n .)
    and             reduce using rule 33 (e -> n .)
    xor             reduce using rule 33 (e -> n .)
    +               reduce using rule 33 (e -> n .)
    -               reduce using rule 33 (e -> n .)
    *               reduce using rule 33 (e -> n .)
    /               reduce using rule 33 (e -> n .)
    ;               reduce using rule 33 (e -> n .)
    $end            reduce using rule 33 (e -> n .)
    )               reduce using rule 33 (e -> n .)
    entao           reduce using rule 33 (e -> n .)
    ,               reduce using rule 33 (e -> n .)
    ate             reduce using rule 33 (e -> n .)
    faca            reduce using rule 33 (e -> n .)


state 17

    (34) e -> string .

    or              reduce using rule 34 (e -> string .)
    and             reduce using rule 34 (e -> string .)
    xor             reduce using rule 34 (e -> string .)
    +               reduce using rule 34 (e -> string .)
    -               reduce using rule 34 (e -> string .)
    *               reduce using rule 34 (e -> string .)
    /               reduce using rule 34 (e -> string .)
    ;               reduce using rule 34 (e -> string .)
    $end            reduce using rule 34 (e -> string .)
    )               reduce using rule 34 (e -> string .)
    entao           reduce using rule 34 (e -> string .)
    ,               reduce using rule 34 (e -> string .)
    ate             reduce using rule 34 (e -> string .)
    faca            reduce using rule 34 (e -> string .)


state 18

    (3) ciclo -> para . var de e ate e faca com_list ; fimpara

    var             shift and go to state 42


state 19

    (23) b -> f .

    or              reduce using rule 23 (b -> f .)
    and             reduce using rule 23 (b -> f .)
    xor             reduce using rule 23 (b -> f .)
    +               reduce using rule 23 (b -> f .)
    -               reduce using rule 23 (b -> f .)
    *               reduce using rule 23 (b -> f .)
    /               reduce using rule 23 (b -> f .)
    ;               reduce using rule 23 (b -> f .)
    $end            reduce using rule 23 (b -> f .)
    )               reduce using rule 23 (b -> f .)
    entao           reduce using rule 23 (b -> f .)
    ,               reduce using rule 23 (b -> f .)
    ate             reduce using rule 23 (b -> f .)
    faca            reduce using rule 23 (b -> f .)


state 20

    (17) n -> nr .

    or              reduce using rule 17 (n -> nr .)
    and             reduce using rule 17 (n -> nr .)
    xor             reduce using rule 17 (n -> nr .)
    +               reduce using rule 17 (n -> nr .)
    -               reduce using rule 17 (n -> nr .)
    *               reduce using rule 17 (n -> nr .)
    /               reduce using rule 17 (n -> nr .)
    ;               reduce using rule 17 (n -> nr .)
    $end            reduce using rule 17 (n -> nr .)
    )               reduce using rule 17 (n -> nr .)
    entao           reduce using rule 17 (n -> nr .)
    ,               reduce using rule 17 (n -> nr .)
    ate             reduce using rule 17 (n -> nr .)
    faca            reduce using rule 17 (n -> nr .)


state 21

    (18) n -> - . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 43
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 22

    (27) f -> true .

    or              reduce using rule 27 (f -> true .)
    and             reduce using rule 27 (f -> true .)
    xor             reduce using rule 27 (f -> true .)
    +               reduce using rule 27 (f -> true .)
    -               reduce using rule 27 (f -> true .)
    *               reduce using rule 27 (f -> true .)
    /               reduce using rule 27 (f -> true .)
    ;               reduce using rule 27 (f -> true .)
    $end            reduce using rule 27 (f -> true .)
    )               reduce using rule 27 (f -> true .)
    entao           reduce using rule 27 (f -> true .)
    ,               reduce using rule 27 (f -> true .)
    ate             reduce using rule 27 (f -> true .)
    faca            reduce using rule 27 (f -> true .)


state 23

    (28) f -> false .

    or              reduce using rule 28 (f -> false .)
    and             reduce using rule 28 (f -> false .)
    xor             reduce using rule 28 (f -> false .)
    +               reduce using rule 28 (f -> false .)
    -               reduce using rule 28 (f -> false .)
    *               reduce using rule 28 (f -> false .)
    /               reduce using rule 28 (f -> false .)
    ;               reduce using rule 28 (f -> false .)
    $end            reduce using rule 28 (f -> false .)
    )               reduce using rule 28 (f -> false .)
    entao           reduce using rule 28 (f -> false .)
    ,               reduce using rule 28 (f -> false .)
    ate             reduce using rule 28 (f -> false .)
    faca            reduce using rule 28 (f -> false .)


state 24

    (29) f -> not . f
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    f                              shift and go to state 44

state 25

    (2) code -> code ; . s
    (12) s -> . func
    (13) s -> . comando
    (14) s -> . fim
    (4) func -> . funcao var ( args ) com_list ; fimfuncao
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fim             shift and go to state 5
    funcao          shift and go to state 6
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    s                              shift and go to state 45
    func                           shift and go to state 3
    comando                        shift and go to state 4
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 26

    (4) func -> funcao var . ( args ) com_list ; fimfuncao

    (               shift and go to state 46


state 27

    (7) comando -> var assign . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 47
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 28

    (35) e -> var ( . e_list )
    (36) e -> var ( . )
    (15) e_list -> . e
    (16) e_list -> . e_list , e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    )               shift and go to state 49
    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e_list                         shift and go to state 48
    e                              shift and go to state 50
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 29

    (31) e -> ( e . )
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    )               shift and go to state 51
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 30

    (30) e -> var .
    (35) e -> var . ( e_list )
    (36) e -> var . ( )

    )               reduce using rule 30 (e -> var .)
    or              reduce using rule 30 (e -> var .)
    and             reduce using rule 30 (e -> var .)
    xor             reduce using rule 30 (e -> var .)
    +               reduce using rule 30 (e -> var .)
    -               reduce using rule 30 (e -> var .)
    *               reduce using rule 30 (e -> var .)
    /               reduce using rule 30 (e -> var .)
    entao           reduce using rule 30 (e -> var .)
    ;               reduce using rule 30 (e -> var .)
    $end            reduce using rule 30 (e -> var .)
    ,               reduce using rule 30 (e -> var .)
    ate             reduce using rule 30 (e -> var .)
    faca            reduce using rule 30 (e -> var .)
    (               shift and go to state 28


state 31

    (24) b -> e or . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 52
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 32

    (25) b -> e and . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 53
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 33

    (26) b -> e xor . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 54
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 34

    (19) n -> e + . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 55
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 35

    (20) n -> e - . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 56
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 36

    (21) n -> e * . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 57
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 37

    (22) n -> e / . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 58
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 38

    (8) comando -> escreva ( . e_list )
    (15) e_list -> . e
    (16) e_list -> . e_list , e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e_list                         shift and go to state 59
    e                              shift and go to state 50
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 39

    (9) comando -> leia ( . var_list )
    (39) var_list -> . var
    (40) var_list -> . var_list , var

    var             shift and go to state 61

    var_list                       shift and go to state 60

state 40

    (10) comando -> vartype : . var_list
    (39) var_list -> . var
    (40) var_list -> . var_list , var

    var             shift and go to state 61

    var_list                       shift and go to state 62

state 41

    (11) comando -> se e . entao com_list ; fimse
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    entao           shift and go to state 63
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 42

    (3) ciclo -> para var . de e ate e faca com_list ; fimpara

    de              shift and go to state 64


state 43

    (18) n -> - e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    +               reduce using rule 18 (n -> - e .)
    -               reduce using rule 18 (n -> - e .)
    *               reduce using rule 18 (n -> - e .)
    /               reduce using rule 18 (n -> - e .)
    ;               reduce using rule 18 (n -> - e .)
    $end            reduce using rule 18 (n -> - e .)
    )               reduce using rule 18 (n -> - e .)
    entao           reduce using rule 18 (n -> - e .)
    ,               reduce using rule 18 (n -> - e .)
    ate             reduce using rule 18 (n -> - e .)
    faca            reduce using rule 18 (n -> - e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33

  ! or              [ reduce using rule 18 (n -> - e .) ]
  ! and             [ reduce using rule 18 (n -> - e .) ]
  ! xor             [ reduce using rule 18 (n -> - e .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 44

    (29) f -> not f .

    or              reduce using rule 29 (f -> not f .)
    and             reduce using rule 29 (f -> not f .)
    xor             reduce using rule 29 (f -> not f .)
    +               reduce using rule 29 (f -> not f .)
    -               reduce using rule 29 (f -> not f .)
    *               reduce using rule 29 (f -> not f .)
    /               reduce using rule 29 (f -> not f .)
    ;               reduce using rule 29 (f -> not f .)
    $end            reduce using rule 29 (f -> not f .)
    )               reduce using rule 29 (f -> not f .)
    entao           reduce using rule 29 (f -> not f .)
    ,               reduce using rule 29 (f -> not f .)
    ate             reduce using rule 29 (f -> not f .)
    faca            reduce using rule 29 (f -> not f .)


state 45

    (2) code -> code ; s .

    ;               reduce using rule 2 (code -> code ; s .)
    $end            reduce using rule 2 (code -> code ; s .)


state 46

    (4) func -> funcao var ( . args ) com_list ; fimfuncao
    (41) args -> .
    (42) args -> . var_list
    (39) var_list -> . var
    (40) var_list -> . var_list , var

    )               reduce using rule 41 (args -> .)
    var             shift and go to state 61

    args                           shift and go to state 65
    var_list                       shift and go to state 66

state 47

    (7) comando -> var assign e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    ;               reduce using rule 7 (comando -> var assign e .)
    $end            reduce using rule 7 (comando -> var assign e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 48

    (35) e -> var ( e_list . )
    (16) e_list -> e_list . , e

    )               shift and go to state 67
    ,               shift and go to state 68


state 49

    (36) e -> var ( ) .

    or              reduce using rule 36 (e -> var ( ) .)
    and             reduce using rule 36 (e -> var ( ) .)
    xor             reduce using rule 36 (e -> var ( ) .)
    +               reduce using rule 36 (e -> var ( ) .)
    -               reduce using rule 36 (e -> var ( ) .)
    *               reduce using rule 36 (e -> var ( ) .)
    /               reduce using rule 36 (e -> var ( ) .)
    ;               reduce using rule 36 (e -> var ( ) .)
    $end            reduce using rule 36 (e -> var ( ) .)
    )               reduce using rule 36 (e -> var ( ) .)
    entao           reduce using rule 36 (e -> var ( ) .)
    ,               reduce using rule 36 (e -> var ( ) .)
    ate             reduce using rule 36 (e -> var ( ) .)
    faca            reduce using rule 36 (e -> var ( ) .)


state 50

    (15) e_list -> e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    )               reduce using rule 15 (e_list -> e .)
    ,               reduce using rule 15 (e_list -> e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 51

    (31) e -> ( e ) .

    or              reduce using rule 31 (e -> ( e ) .)
    and             reduce using rule 31 (e -> ( e ) .)
    xor             reduce using rule 31 (e -> ( e ) .)
    +               reduce using rule 31 (e -> ( e ) .)
    -               reduce using rule 31 (e -> ( e ) .)
    *               reduce using rule 31 (e -> ( e ) .)
    /               reduce using rule 31 (e -> ( e ) .)
    ;               reduce using rule 31 (e -> ( e ) .)
    $end            reduce using rule 31 (e -> ( e ) .)
    )               reduce using rule 31 (e -> ( e ) .)
    entao           reduce using rule 31 (e -> ( e ) .)
    ,               reduce using rule 31 (e -> ( e ) .)
    ate             reduce using rule 31 (e -> ( e ) .)
    faca            reduce using rule 31 (e -> ( e ) .)


state 52

    (24) b -> e or e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    or              reduce using rule 24 (b -> e or e .)
    xor             reduce using rule 24 (b -> e or e .)
    +               reduce using rule 24 (b -> e or e .)
    -               reduce using rule 24 (b -> e or e .)
    *               reduce using rule 24 (b -> e or e .)
    /               reduce using rule 24 (b -> e or e .)
    ;               reduce using rule 24 (b -> e or e .)
    $end            reduce using rule 24 (b -> e or e .)
    )               reduce using rule 24 (b -> e or e .)
    entao           reduce using rule 24 (b -> e or e .)
    ,               reduce using rule 24 (b -> e or e .)
    ate             reduce using rule 24 (b -> e or e .)
    faca            reduce using rule 24 (b -> e or e .)
    and             shift and go to state 32

  ! and             [ reduce using rule 24 (b -> e or e .) ]
  ! or              [ shift and go to state 31 ]
  ! xor             [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 53

    (25) b -> e and e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    or              reduce using rule 25 (b -> e and e .)
    and             reduce using rule 25 (b -> e and e .)
    xor             reduce using rule 25 (b -> e and e .)
    +               reduce using rule 25 (b -> e and e .)
    -               reduce using rule 25 (b -> e and e .)
    *               reduce using rule 25 (b -> e and e .)
    /               reduce using rule 25 (b -> e and e .)
    ;               reduce using rule 25 (b -> e and e .)
    $end            reduce using rule 25 (b -> e and e .)
    )               reduce using rule 25 (b -> e and e .)
    entao           reduce using rule 25 (b -> e and e .)
    ,               reduce using rule 25 (b -> e and e .)
    ate             reduce using rule 25 (b -> e and e .)
    faca            reduce using rule 25 (b -> e and e .)

  ! or              [ shift and go to state 31 ]
  ! and             [ shift and go to state 32 ]
  ! xor             [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 54

    (26) b -> e xor e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    or              reduce using rule 26 (b -> e xor e .)
    xor             reduce using rule 26 (b -> e xor e .)
    +               reduce using rule 26 (b -> e xor e .)
    -               reduce using rule 26 (b -> e xor e .)
    *               reduce using rule 26 (b -> e xor e .)
    /               reduce using rule 26 (b -> e xor e .)
    ;               reduce using rule 26 (b -> e xor e .)
    $end            reduce using rule 26 (b -> e xor e .)
    )               reduce using rule 26 (b -> e xor e .)
    entao           reduce using rule 26 (b -> e xor e .)
    ,               reduce using rule 26 (b -> e xor e .)
    ate             reduce using rule 26 (b -> e xor e .)
    faca            reduce using rule 26 (b -> e xor e .)
    and             shift and go to state 32

  ! and             [ reduce using rule 26 (b -> e xor e .) ]
  ! or              [ shift and go to state 31 ]
  ! xor             [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 55

    (19) n -> e + e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    +               reduce using rule 19 (n -> e + e .)
    -               reduce using rule 19 (n -> e + e .)
    ;               reduce using rule 19 (n -> e + e .)
    $end            reduce using rule 19 (n -> e + e .)
    )               reduce using rule 19 (n -> e + e .)
    entao           reduce using rule 19 (n -> e + e .)
    ,               reduce using rule 19 (n -> e + e .)
    ate             reduce using rule 19 (n -> e + e .)
    faca            reduce using rule 19 (n -> e + e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    *               shift and go to state 36
    /               shift and go to state 37

  ! or              [ reduce using rule 19 (n -> e + e .) ]
  ! and             [ reduce using rule 19 (n -> e + e .) ]
  ! xor             [ reduce using rule 19 (n -> e + e .) ]
  ! *               [ reduce using rule 19 (n -> e + e .) ]
  ! /               [ reduce using rule 19 (n -> e + e .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 56

    (20) n -> e - e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    +               reduce using rule 20 (n -> e - e .)
    -               reduce using rule 20 (n -> e - e .)
    ;               reduce using rule 20 (n -> e - e .)
    $end            reduce using rule 20 (n -> e - e .)
    )               reduce using rule 20 (n -> e - e .)
    entao           reduce using rule 20 (n -> e - e .)
    ,               reduce using rule 20 (n -> e - e .)
    ate             reduce using rule 20 (n -> e - e .)
    faca            reduce using rule 20 (n -> e - e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    *               shift and go to state 36
    /               shift and go to state 37

  ! or              [ reduce using rule 20 (n -> e - e .) ]
  ! and             [ reduce using rule 20 (n -> e - e .) ]
  ! xor             [ reduce using rule 20 (n -> e - e .) ]
  ! *               [ reduce using rule 20 (n -> e - e .) ]
  ! /               [ reduce using rule 20 (n -> e - e .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 57

    (21) n -> e * e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    +               reduce using rule 21 (n -> e * e .)
    -               reduce using rule 21 (n -> e * e .)
    *               reduce using rule 21 (n -> e * e .)
    /               reduce using rule 21 (n -> e * e .)
    ;               reduce using rule 21 (n -> e * e .)
    $end            reduce using rule 21 (n -> e * e .)
    )               reduce using rule 21 (n -> e * e .)
    entao           reduce using rule 21 (n -> e * e .)
    ,               reduce using rule 21 (n -> e * e .)
    ate             reduce using rule 21 (n -> e * e .)
    faca            reduce using rule 21 (n -> e * e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33

  ! or              [ reduce using rule 21 (n -> e * e .) ]
  ! and             [ reduce using rule 21 (n -> e * e .) ]
  ! xor             [ reduce using rule 21 (n -> e * e .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 58

    (22) n -> e / e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    +               reduce using rule 22 (n -> e / e .)
    -               reduce using rule 22 (n -> e / e .)
    *               reduce using rule 22 (n -> e / e .)
    /               reduce using rule 22 (n -> e / e .)
    ;               reduce using rule 22 (n -> e / e .)
    $end            reduce using rule 22 (n -> e / e .)
    )               reduce using rule 22 (n -> e / e .)
    entao           reduce using rule 22 (n -> e / e .)
    ,               reduce using rule 22 (n -> e / e .)
    ate             reduce using rule 22 (n -> e / e .)
    faca            reduce using rule 22 (n -> e / e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33

  ! or              [ reduce using rule 22 (n -> e / e .) ]
  ! and             [ reduce using rule 22 (n -> e / e .) ]
  ! xor             [ reduce using rule 22 (n -> e / e .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 59

    (8) comando -> escreva ( e_list . )
    (16) e_list -> e_list . , e

    )               shift and go to state 69
    ,               shift and go to state 68


state 60

    (9) comando -> leia ( var_list . )
    (40) var_list -> var_list . , var

    )               shift and go to state 70
    ,               shift and go to state 71


state 61

    (39) var_list -> var .

    )               reduce using rule 39 (var_list -> var .)
    ,               reduce using rule 39 (var_list -> var .)
    ;               reduce using rule 39 (var_list -> var .)
    $end            reduce using rule 39 (var_list -> var .)


state 62

    (10) comando -> vartype : var_list .
    (40) var_list -> var_list . , var

    ;               reduce using rule 10 (comando -> vartype : var_list .)
    $end            reduce using rule 10 (comando -> vartype : var_list .)
    ,               shift and go to state 71


state 63

    (11) comando -> se e entao . com_list ; fimse
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 9
    com_list                       shift and go to state 72
    comando                        shift and go to state 73
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 64

    (3) ciclo -> para var de . e ate e faca com_list ; fimpara
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 74
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 65

    (4) func -> funcao var ( args . ) com_list ; fimfuncao

    )               shift and go to state 75


state 66

    (42) args -> var_list .
    (40) var_list -> var_list . , var

    )               reduce using rule 42 (args -> var_list .)
    ,               shift and go to state 71


state 67

    (35) e -> var ( e_list ) .

    or              reduce using rule 35 (e -> var ( e_list ) .)
    and             reduce using rule 35 (e -> var ( e_list ) .)
    xor             reduce using rule 35 (e -> var ( e_list ) .)
    +               reduce using rule 35 (e -> var ( e_list ) .)
    -               reduce using rule 35 (e -> var ( e_list ) .)
    *               reduce using rule 35 (e -> var ( e_list ) .)
    /               reduce using rule 35 (e -> var ( e_list ) .)
    ;               reduce using rule 35 (e -> var ( e_list ) .)
    $end            reduce using rule 35 (e -> var ( e_list ) .)
    )               reduce using rule 35 (e -> var ( e_list ) .)
    entao           reduce using rule 35 (e -> var ( e_list ) .)
    ,               reduce using rule 35 (e -> var ( e_list ) .)
    ate             reduce using rule 35 (e -> var ( e_list ) .)
    faca            reduce using rule 35 (e -> var ( e_list ) .)


state 68

    (16) e_list -> e_list , . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 76
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 69

    (8) comando -> escreva ( e_list ) .

    ;               reduce using rule 8 (comando -> escreva ( e_list ) .)
    $end            reduce using rule 8 (comando -> escreva ( e_list ) .)


state 70

    (9) comando -> leia ( var_list ) .

    ;               reduce using rule 9 (comando -> leia ( var_list ) .)
    $end            reduce using rule 9 (comando -> leia ( var_list ) .)


state 71

    (40) var_list -> var_list , . var

    var             shift and go to state 77


state 72

    (11) comando -> se e entao com_list . ; fimse
    (38) com_list -> com_list . ; comando

    ;               shift and go to state 78


state 73

    (37) com_list -> comando .

    ;               reduce using rule 37 (com_list -> comando .)


state 74

    (3) ciclo -> para var de e . ate e faca com_list ; fimpara
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    ate             shift and go to state 79
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 75

    (4) func -> funcao var ( args ) . com_list ; fimfuncao
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    com_list                       shift and go to state 80
    comando                        shift and go to state 73
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 76

    (16) e_list -> e_list , e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    )               reduce using rule 16 (e_list -> e_list , e .)
    ,               reduce using rule 16 (e_list -> e_list , e .)
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 77

    (40) var_list -> var_list , var .

    )               reduce using rule 40 (var_list -> var_list , var .)
    ,               reduce using rule 40 (var_list -> var_list , var .)
    ;               reduce using rule 40 (var_list -> var_list , var .)
    $end            reduce using rule 40 (var_list -> var_list , var .)


state 78

    (11) comando -> se e entao com_list ; . fimse
    (38) com_list -> com_list ; . comando
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fimse           shift and go to state 81
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 9
    comando                        shift and go to state 82
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 79

    (3) ciclo -> para var de e ate . e faca com_list ; fimpara
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 30
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 83
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 80

    (4) func -> funcao var ( args ) com_list . ; fimfuncao
    (38) com_list -> com_list . ; comando

    ;               shift and go to state 84


state 81

    (11) comando -> se e entao com_list ; fimse .

    ;               reduce using rule 11 (comando -> se e entao com_list ; fimse .)
    $end            reduce using rule 11 (comando -> se e entao com_list ; fimse .)


state 82

    (38) com_list -> com_list ; comando .

    ;               reduce using rule 38 (com_list -> com_list ; comando .)


state 83

    (3) ciclo -> para var de e ate e . faca com_list ; fimpara
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (19) n -> e . + e
    (20) n -> e . - e
    (21) n -> e . * e
    (22) n -> e . / e

    faca            shift and go to state 85
    or              shift and go to state 31
    and             shift and go to state 32
    xor             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 84

    (4) func -> funcao var ( args ) com_list ; . fimfuncao
    (38) com_list -> com_list ; . comando
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fimfuncao       shift and go to state 86
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    comando                        shift and go to state 82
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 85

    (3) ciclo -> para var de e ate e faca . com_list ; fimpara
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 9
    com_list                       shift and go to state 87
    comando                        shift and go to state 73
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 86

    (4) func -> funcao var ( args ) com_list ; fimfuncao .

    ;               reduce using rule 4 (func -> funcao var ( args ) com_list ; fimfuncao .)
    $end            reduce using rule 4 (func -> funcao var ( args ) com_list ; fimfuncao .)


state 87

    (3) ciclo -> para var de e ate e faca com_list . ; fimpara
    (38) com_list -> com_list . ; comando

    ;               shift and go to state 88


state 88

    (3) ciclo -> para var de e ate e faca com_list ; . fimpara
    (38) com_list -> com_list ; . comando
    (5) comando -> . e
    (6) comando -> . ciclo
    (7) comando -> . var assign e
    (8) comando -> . escreva ( e_list )
    (9) comando -> . leia ( var_list )
    (10) comando -> . vartype : var_list
    (11) comando -> . se e entao com_list ; fimse
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . para var de e ate e faca com_list ; fimpara
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (17) n -> . nr
    (18) n -> . - e
    (19) n -> . e + e
    (20) n -> . e - e
    (21) n -> . e * e
    (22) n -> . e / e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fimpara         shift and go to state 89
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    nr              shift and go to state 20
    -               shift and go to state 21
    true            shift and go to state 22
    false           shift and go to state 23
    not             shift and go to state 24

    e                              shift and go to state 9
    comando                        shift and go to state 82
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 19

state 89

    (3) ciclo -> para var de e ate e faca com_list ; fimpara .

    ;               reduce using rule 3 (ciclo -> para var de e ate e faca com_list ; fimpara .)
    $end            reduce using rule 3 (ciclo -> para var de e ate e faca com_list ; fimpara .)

