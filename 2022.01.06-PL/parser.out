Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> s
Rule 2     code -> code ; s
Rule 3     s -> func
Rule 4     s -> comando
Rule 5     s -> fim
Rule 6     ciclo -> para var de e ate e faca com_list ; fimpara
Rule 7     ciclo -> enquanto n faca com_list ; fimenquanto
Rule 8     func -> funcao var ( args ) com_list ; fimfuncao
Rule 9     comando -> e
Rule 10    comando -> ciclo
Rule 11    comando -> var assign e
Rule 12    comando -> escreva ( e_list )
Rule 13    comando -> leia ( var_list )
Rule 14    comando -> vartype : var_list
Rule 15    comando -> se e entao com_list ; senao com_list ; fimse
Rule 16    comando -> se e entao com_list ; fimse
Rule 17    com_list -> comando
Rule 18    com_list -> com_list ; comando
Rule 19    e_list -> e
Rule 20    e_list -> e_list , e
Rule 21    e -> var
Rule 22    e -> ( e )
Rule 23    e -> b
Rule 24    e -> n
Rule 25    e -> string
Rule 26    e -> var ( e_list )
Rule 27    e -> var ( )
Rule 28    n -> nr
Rule 29    n -> - e
Rule 30    n -> ( n )
Rule 31    n -> e + e
Rule 32    n -> e - e
Rule 33    n -> e * e
Rule 34    n -> e / e
Rule 35    n -> e < e
Rule 36    n -> e leq e
Rule 37    n -> e > e
Rule 38    n -> e geq e
Rule 39    n -> e = e
Rule 40    n -> e dif e
Rule 41    b -> f
Rule 42    b -> e or e
Rule 43    b -> e and e
Rule 44    b -> e xor e
Rule 45    f -> true
Rule 46    f -> false
Rule 47    f -> not f
Rule 48    var_list -> var
Rule 49    var_list -> var_list , var
Rule 50    args -> <empty>
Rule 51    args -> var_list

Terminals, with rules where they appear

(                    : 8 12 13 22 26 27 30
)                    : 8 12 13 22 26 27 30
*                    : 33
+                    : 31
,                    : 20 49
-                    : 29 32
/                    : 34
:                    : 14
;                    : 2 6 7 8 15 15 16 18
<                    : 35
=                    : 39
>                    : 37
and                  : 43
assign               : 11
ate                  : 6
de                   : 6
dif                  : 40
enquanto             : 7
entao                : 15 16
error                : 
escreva              : 12
faca                 : 6 7
false                : 46
fim                  : 5
fimenquanto          : 7
fimfuncao            : 8
fimpara              : 6
fimse                : 15 16
funcao               : 8
geq                  : 38
leia                 : 13
leq                  : 36
not                  : 47
nr                   : 28
or                   : 42
para                 : 6
se                   : 15 16
senao                : 15
string               : 25
true                 : 45
var                  : 6 8 11 21 26 27 48 49
vartype              : 14
xor                  : 44

Nonterminals, with rules where they appear

args                 : 8
b                    : 23
ciclo                : 10
code                 : 2 0
com_list             : 6 7 8 15 15 16 18
comando              : 4 17 18
e                    : 6 6 9 11 15 16 19 20 22 29 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 42 42 43 43 44 44
e_list               : 12 20 26
f                    : 41 47
func                 : 3
n                    : 7 24 30
s                    : 1 2
var_list             : 13 14 49 51

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . s
    (2) code -> . code ; s
    (3) s -> . func
    (4) s -> . comando
    (5) s -> . fim
    (8) func -> . funcao var ( args ) com_list ; fimfuncao
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    fim             shift and go to state 5
    funcao          shift and go to state 6
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    code                           shift and go to state 1
    s                              shift and go to state 2
    func                           shift and go to state 3
    comando                        shift and go to state 4
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 1

    (0) S' -> code .
    (2) code -> code . ; s

    ;               shift and go to state 26


state 2

    (1) code -> s .

    ;               reduce using rule 1 (code -> s .)
    $end            reduce using rule 1 (code -> s .)


state 3

    (3) s -> func .

    ;               reduce using rule 3 (s -> func .)
    $end            reduce using rule 3 (s -> func .)


state 4

    (4) s -> comando .

    ;               reduce using rule 4 (s -> comando .)
    $end            reduce using rule 4 (s -> comando .)


state 5

    (5) s -> fim .

    ;               reduce using rule 5 (s -> fim .)
    $end            reduce using rule 5 (s -> fim .)


state 6

    (8) func -> funcao . var ( args ) com_list ; fimfuncao

    var             shift and go to state 27


state 7

    (11) comando -> var . assign e
    (21) e -> var .
    (26) e -> var . ( e_list )
    (27) e -> var . ( )

    assign          shift and go to state 28
    or              reduce using rule 21 (e -> var .)
    and             reduce using rule 21 (e -> var .)
    xor             reduce using rule 21 (e -> var .)
    +               reduce using rule 21 (e -> var .)
    -               reduce using rule 21 (e -> var .)
    *               reduce using rule 21 (e -> var .)
    /               reduce using rule 21 (e -> var .)
    <               reduce using rule 21 (e -> var .)
    leq             reduce using rule 21 (e -> var .)
    >               reduce using rule 21 (e -> var .)
    geq             reduce using rule 21 (e -> var .)
    =               reduce using rule 21 (e -> var .)
    dif             reduce using rule 21 (e -> var .)
    ;               reduce using rule 21 (e -> var .)
    $end            reduce using rule 21 (e -> var .)
    (               shift and go to state 29


state 8

    (22) e -> ( . e )
    (30) n -> ( . n )
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 30
    n                              shift and go to state 31
    b                              shift and go to state 15
    f                              shift and go to state 20

state 9

    (9) comando -> e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    ;               reduce using rule 9 (comando -> e .)
    $end            reduce using rule 9 (comando -> e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 10

    (10) comando -> ciclo .

    ;               reduce using rule 10 (comando -> ciclo .)
    $end            reduce using rule 10 (comando -> ciclo .)


state 11

    (12) comando -> escreva . ( e_list )

    (               shift and go to state 46


state 12

    (13) comando -> leia . ( var_list )

    (               shift and go to state 47


state 13

    (14) comando -> vartype . : var_list

    :               shift and go to state 48


state 14

    (15) comando -> se . e entao com_list ; senao com_list ; fimse
    (16) comando -> se . e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 49
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 15

    (23) e -> b .

    or              reduce using rule 23 (e -> b .)
    and             reduce using rule 23 (e -> b .)
    xor             reduce using rule 23 (e -> b .)
    +               reduce using rule 23 (e -> b .)
    -               reduce using rule 23 (e -> b .)
    *               reduce using rule 23 (e -> b .)
    /               reduce using rule 23 (e -> b .)
    <               reduce using rule 23 (e -> b .)
    leq             reduce using rule 23 (e -> b .)
    >               reduce using rule 23 (e -> b .)
    geq             reduce using rule 23 (e -> b .)
    =               reduce using rule 23 (e -> b .)
    dif             reduce using rule 23 (e -> b .)
    ;               reduce using rule 23 (e -> b .)
    $end            reduce using rule 23 (e -> b .)
    )               reduce using rule 23 (e -> b .)
    entao           reduce using rule 23 (e -> b .)
    faca            reduce using rule 23 (e -> b .)
    ,               reduce using rule 23 (e -> b .)
    ate             reduce using rule 23 (e -> b .)


state 16

    (24) e -> n .

    or              reduce using rule 24 (e -> n .)
    and             reduce using rule 24 (e -> n .)
    xor             reduce using rule 24 (e -> n .)
    +               reduce using rule 24 (e -> n .)
    -               reduce using rule 24 (e -> n .)
    *               reduce using rule 24 (e -> n .)
    /               reduce using rule 24 (e -> n .)
    <               reduce using rule 24 (e -> n .)
    leq             reduce using rule 24 (e -> n .)
    >               reduce using rule 24 (e -> n .)
    geq             reduce using rule 24 (e -> n .)
    =               reduce using rule 24 (e -> n .)
    dif             reduce using rule 24 (e -> n .)
    ;               reduce using rule 24 (e -> n .)
    $end            reduce using rule 24 (e -> n .)
    entao           reduce using rule 24 (e -> n .)
    )               reduce using rule 24 (e -> n .)
    faca            reduce using rule 24 (e -> n .)
    ,               reduce using rule 24 (e -> n .)
    ate             reduce using rule 24 (e -> n .)


state 17

    (25) e -> string .

    or              reduce using rule 25 (e -> string .)
    and             reduce using rule 25 (e -> string .)
    xor             reduce using rule 25 (e -> string .)
    +               reduce using rule 25 (e -> string .)
    -               reduce using rule 25 (e -> string .)
    *               reduce using rule 25 (e -> string .)
    /               reduce using rule 25 (e -> string .)
    <               reduce using rule 25 (e -> string .)
    leq             reduce using rule 25 (e -> string .)
    >               reduce using rule 25 (e -> string .)
    geq             reduce using rule 25 (e -> string .)
    =               reduce using rule 25 (e -> string .)
    dif             reduce using rule 25 (e -> string .)
    ;               reduce using rule 25 (e -> string .)
    $end            reduce using rule 25 (e -> string .)
    )               reduce using rule 25 (e -> string .)
    entao           reduce using rule 25 (e -> string .)
    faca            reduce using rule 25 (e -> string .)
    ,               reduce using rule 25 (e -> string .)
    ate             reduce using rule 25 (e -> string .)


state 18

    (6) ciclo -> para . var de e ate e faca com_list ; fimpara

    var             shift and go to state 50


state 19

    (7) ciclo -> enquanto . n faca com_list ; fimenquanto
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    nr              shift and go to state 21
    -               shift and go to state 22
    (               shift and go to state 53
    var             shift and go to state 32
    string          shift and go to state 17
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    n                              shift and go to state 51
    e                              shift and go to state 52
    b                              shift and go to state 15
    f                              shift and go to state 20

state 20

    (41) b -> f .

    or              reduce using rule 41 (b -> f .)
    and             reduce using rule 41 (b -> f .)
    xor             reduce using rule 41 (b -> f .)
    +               reduce using rule 41 (b -> f .)
    -               reduce using rule 41 (b -> f .)
    *               reduce using rule 41 (b -> f .)
    /               reduce using rule 41 (b -> f .)
    <               reduce using rule 41 (b -> f .)
    leq             reduce using rule 41 (b -> f .)
    >               reduce using rule 41 (b -> f .)
    geq             reduce using rule 41 (b -> f .)
    =               reduce using rule 41 (b -> f .)
    dif             reduce using rule 41 (b -> f .)
    ;               reduce using rule 41 (b -> f .)
    $end            reduce using rule 41 (b -> f .)
    )               reduce using rule 41 (b -> f .)
    entao           reduce using rule 41 (b -> f .)
    faca            reduce using rule 41 (b -> f .)
    ,               reduce using rule 41 (b -> f .)
    ate             reduce using rule 41 (b -> f .)


state 21

    (28) n -> nr .

    or              reduce using rule 28 (n -> nr .)
    and             reduce using rule 28 (n -> nr .)
    xor             reduce using rule 28 (n -> nr .)
    +               reduce using rule 28 (n -> nr .)
    -               reduce using rule 28 (n -> nr .)
    *               reduce using rule 28 (n -> nr .)
    /               reduce using rule 28 (n -> nr .)
    <               reduce using rule 28 (n -> nr .)
    leq             reduce using rule 28 (n -> nr .)
    >               reduce using rule 28 (n -> nr .)
    geq             reduce using rule 28 (n -> nr .)
    =               reduce using rule 28 (n -> nr .)
    dif             reduce using rule 28 (n -> nr .)
    ;               reduce using rule 28 (n -> nr .)
    $end            reduce using rule 28 (n -> nr .)
    )               reduce using rule 28 (n -> nr .)
    entao           reduce using rule 28 (n -> nr .)
    faca            reduce using rule 28 (n -> nr .)
    ,               reduce using rule 28 (n -> nr .)
    ate             reduce using rule 28 (n -> nr .)


state 22

    (29) n -> - . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 54
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 23

    (45) f -> true .

    or              reduce using rule 45 (f -> true .)
    and             reduce using rule 45 (f -> true .)
    xor             reduce using rule 45 (f -> true .)
    +               reduce using rule 45 (f -> true .)
    -               reduce using rule 45 (f -> true .)
    *               reduce using rule 45 (f -> true .)
    /               reduce using rule 45 (f -> true .)
    <               reduce using rule 45 (f -> true .)
    leq             reduce using rule 45 (f -> true .)
    >               reduce using rule 45 (f -> true .)
    geq             reduce using rule 45 (f -> true .)
    =               reduce using rule 45 (f -> true .)
    dif             reduce using rule 45 (f -> true .)
    ;               reduce using rule 45 (f -> true .)
    $end            reduce using rule 45 (f -> true .)
    )               reduce using rule 45 (f -> true .)
    entao           reduce using rule 45 (f -> true .)
    faca            reduce using rule 45 (f -> true .)
    ,               reduce using rule 45 (f -> true .)
    ate             reduce using rule 45 (f -> true .)


state 24

    (46) f -> false .

    or              reduce using rule 46 (f -> false .)
    and             reduce using rule 46 (f -> false .)
    xor             reduce using rule 46 (f -> false .)
    +               reduce using rule 46 (f -> false .)
    -               reduce using rule 46 (f -> false .)
    *               reduce using rule 46 (f -> false .)
    /               reduce using rule 46 (f -> false .)
    <               reduce using rule 46 (f -> false .)
    leq             reduce using rule 46 (f -> false .)
    >               reduce using rule 46 (f -> false .)
    geq             reduce using rule 46 (f -> false .)
    =               reduce using rule 46 (f -> false .)
    dif             reduce using rule 46 (f -> false .)
    ;               reduce using rule 46 (f -> false .)
    $end            reduce using rule 46 (f -> false .)
    )               reduce using rule 46 (f -> false .)
    entao           reduce using rule 46 (f -> false .)
    faca            reduce using rule 46 (f -> false .)
    ,               reduce using rule 46 (f -> false .)
    ate             reduce using rule 46 (f -> false .)


state 25

    (47) f -> not . f
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    f                              shift and go to state 55

state 26

    (2) code -> code ; . s
    (3) s -> . func
    (4) s -> . comando
    (5) s -> . fim
    (8) func -> . funcao var ( args ) com_list ; fimfuncao
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    fim             shift and go to state 5
    funcao          shift and go to state 6
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    s                              shift and go to state 56
    func                           shift and go to state 3
    comando                        shift and go to state 4
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 27

    (8) func -> funcao var . ( args ) com_list ; fimfuncao

    (               shift and go to state 57


state 28

    (11) comando -> var assign . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 58
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 29

    (26) e -> var ( . e_list )
    (27) e -> var ( . )
    (19) e_list -> . e
    (20) e_list -> . e_list , e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    )               shift and go to state 60
    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e_list                         shift and go to state 59
    e                              shift and go to state 61
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 30

    (22) e -> ( e . )
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e

    )               shift and go to state 62
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35


state 31

    (30) n -> ( n . )
    (24) e -> n .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 63
    +               reduce using rule 24 (e -> n .)
    -               reduce using rule 24 (e -> n .)
    *               reduce using rule 24 (e -> n .)
    /               reduce using rule 24 (e -> n .)
    <               reduce using rule 24 (e -> n .)
    leq             reduce using rule 24 (e -> n .)
    >               reduce using rule 24 (e -> n .)
    geq             reduce using rule 24 (e -> n .)
    =               reduce using rule 24 (e -> n .)
    dif             reduce using rule 24 (e -> n .)
    or              reduce using rule 24 (e -> n .)
    and             reduce using rule 24 (e -> n .)
    xor             reduce using rule 24 (e -> n .)

  ! )               [ reduce using rule 24 (e -> n .) ]


state 32

    (21) e -> var .
    (26) e -> var . ( e_list )
    (27) e -> var . ( )

    )               reduce using rule 21 (e -> var .)
    +               reduce using rule 21 (e -> var .)
    -               reduce using rule 21 (e -> var .)
    *               reduce using rule 21 (e -> var .)
    /               reduce using rule 21 (e -> var .)
    <               reduce using rule 21 (e -> var .)
    leq             reduce using rule 21 (e -> var .)
    >               reduce using rule 21 (e -> var .)
    geq             reduce using rule 21 (e -> var .)
    =               reduce using rule 21 (e -> var .)
    dif             reduce using rule 21 (e -> var .)
    or              reduce using rule 21 (e -> var .)
    and             reduce using rule 21 (e -> var .)
    xor             reduce using rule 21 (e -> var .)
    entao           reduce using rule 21 (e -> var .)
    ;               reduce using rule 21 (e -> var .)
    $end            reduce using rule 21 (e -> var .)
    faca            reduce using rule 21 (e -> var .)
    ,               reduce using rule 21 (e -> var .)
    ate             reduce using rule 21 (e -> var .)
    (               shift and go to state 29


state 33

    (42) b -> e or . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 64
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 34

    (43) b -> e and . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 65
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 35

    (44) b -> e xor . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 66
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 36

    (31) n -> e + . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 67
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 37

    (32) n -> e - . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 68
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 38

    (33) n -> e * . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 69
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 39

    (34) n -> e / . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 70
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 40

    (35) n -> e < . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 71
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 41

    (36) n -> e leq . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 72
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 42

    (37) n -> e > . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 73
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 43

    (38) n -> e geq . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 74
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 44

    (39) n -> e = . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 75
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 45

    (40) n -> e dif . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 76
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 46

    (12) comando -> escreva ( . e_list )
    (19) e_list -> . e
    (20) e_list -> . e_list , e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e_list                         shift and go to state 77
    e                              shift and go to state 61
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 47

    (13) comando -> leia ( . var_list )
    (48) var_list -> . var
    (49) var_list -> . var_list , var

    var             shift and go to state 79

    var_list                       shift and go to state 78

state 48

    (14) comando -> vartype : . var_list
    (48) var_list -> . var
    (49) var_list -> . var_list , var

    var             shift and go to state 79

    var_list                       shift and go to state 80

state 49

    (15) comando -> se e . entao com_list ; senao com_list ; fimse
    (16) comando -> se e . entao com_list ; fimse
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    entao           shift and go to state 81
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 50

    (6) ciclo -> para var . de e ate e faca com_list ; fimpara

    de              shift and go to state 82


state 51

    (7) ciclo -> enquanto n . faca com_list ; fimenquanto
    (24) e -> n .

    faca            shift and go to state 83
    +               reduce using rule 24 (e -> n .)
    -               reduce using rule 24 (e -> n .)
    *               reduce using rule 24 (e -> n .)
    /               reduce using rule 24 (e -> n .)
    <               reduce using rule 24 (e -> n .)
    leq             reduce using rule 24 (e -> n .)
    >               reduce using rule 24 (e -> n .)
    geq             reduce using rule 24 (e -> n .)
    =               reduce using rule 24 (e -> n .)
    dif             reduce using rule 24 (e -> n .)
    or              reduce using rule 24 (e -> n .)
    and             reduce using rule 24 (e -> n .)
    xor             reduce using rule 24 (e -> n .)


state 52

    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e

    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35


state 53

    (30) n -> ( . n )
    (22) e -> ( . e )
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    nr              shift and go to state 21
    -               shift and go to state 22
    (               shift and go to state 53
    var             shift and go to state 32
    string          shift and go to state 17
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    n                              shift and go to state 31
    e                              shift and go to state 30
    b                              shift and go to state 15
    f                              shift and go to state 20

state 54

    (29) n -> - e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 29 (n -> - e .)
    and             reduce using rule 29 (n -> - e .)
    xor             reduce using rule 29 (n -> - e .)
    +               reduce using rule 29 (n -> - e .)
    -               reduce using rule 29 (n -> - e .)
    *               reduce using rule 29 (n -> - e .)
    /               reduce using rule 29 (n -> - e .)
    <               reduce using rule 29 (n -> - e .)
    leq             reduce using rule 29 (n -> - e .)
    >               reduce using rule 29 (n -> - e .)
    geq             reduce using rule 29 (n -> - e .)
    =               reduce using rule 29 (n -> - e .)
    dif             reduce using rule 29 (n -> - e .)
    ;               reduce using rule 29 (n -> - e .)
    $end            reduce using rule 29 (n -> - e .)
    )               reduce using rule 29 (n -> - e .)
    entao           reduce using rule 29 (n -> - e .)
    faca            reduce using rule 29 (n -> - e .)
    ,               reduce using rule 29 (n -> - e .)
    ate             reduce using rule 29 (n -> - e .)

  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 55

    (47) f -> not f .

    or              reduce using rule 47 (f -> not f .)
    and             reduce using rule 47 (f -> not f .)
    xor             reduce using rule 47 (f -> not f .)
    +               reduce using rule 47 (f -> not f .)
    -               reduce using rule 47 (f -> not f .)
    *               reduce using rule 47 (f -> not f .)
    /               reduce using rule 47 (f -> not f .)
    <               reduce using rule 47 (f -> not f .)
    leq             reduce using rule 47 (f -> not f .)
    >               reduce using rule 47 (f -> not f .)
    geq             reduce using rule 47 (f -> not f .)
    =               reduce using rule 47 (f -> not f .)
    dif             reduce using rule 47 (f -> not f .)
    ;               reduce using rule 47 (f -> not f .)
    $end            reduce using rule 47 (f -> not f .)
    )               reduce using rule 47 (f -> not f .)
    entao           reduce using rule 47 (f -> not f .)
    faca            reduce using rule 47 (f -> not f .)
    ,               reduce using rule 47 (f -> not f .)
    ate             reduce using rule 47 (f -> not f .)


state 56

    (2) code -> code ; s .

    ;               reduce using rule 2 (code -> code ; s .)
    $end            reduce using rule 2 (code -> code ; s .)


state 57

    (8) func -> funcao var ( . args ) com_list ; fimfuncao
    (50) args -> .
    (51) args -> . var_list
    (48) var_list -> . var
    (49) var_list -> . var_list , var

    )               reduce using rule 50 (args -> .)
    var             shift and go to state 79

    args                           shift and go to state 84
    var_list                       shift and go to state 85

state 58

    (11) comando -> var assign e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    ;               reduce using rule 11 (comando -> var assign e .)
    $end            reduce using rule 11 (comando -> var assign e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 59

    (26) e -> var ( e_list . )
    (20) e_list -> e_list . , e

    )               shift and go to state 86
    ,               shift and go to state 87


state 60

    (27) e -> var ( ) .

    or              reduce using rule 27 (e -> var ( ) .)
    and             reduce using rule 27 (e -> var ( ) .)
    xor             reduce using rule 27 (e -> var ( ) .)
    +               reduce using rule 27 (e -> var ( ) .)
    -               reduce using rule 27 (e -> var ( ) .)
    *               reduce using rule 27 (e -> var ( ) .)
    /               reduce using rule 27 (e -> var ( ) .)
    <               reduce using rule 27 (e -> var ( ) .)
    leq             reduce using rule 27 (e -> var ( ) .)
    >               reduce using rule 27 (e -> var ( ) .)
    geq             reduce using rule 27 (e -> var ( ) .)
    =               reduce using rule 27 (e -> var ( ) .)
    dif             reduce using rule 27 (e -> var ( ) .)
    ;               reduce using rule 27 (e -> var ( ) .)
    $end            reduce using rule 27 (e -> var ( ) .)
    )               reduce using rule 27 (e -> var ( ) .)
    entao           reduce using rule 27 (e -> var ( ) .)
    faca            reduce using rule 27 (e -> var ( ) .)
    ,               reduce using rule 27 (e -> var ( ) .)
    ate             reduce using rule 27 (e -> var ( ) .)


state 61

    (19) e_list -> e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    )               reduce using rule 19 (e_list -> e .)
    ,               reduce using rule 19 (e_list -> e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 62

    (22) e -> ( e ) .

    or              reduce using rule 22 (e -> ( e ) .)
    and             reduce using rule 22 (e -> ( e ) .)
    xor             reduce using rule 22 (e -> ( e ) .)
    +               reduce using rule 22 (e -> ( e ) .)
    -               reduce using rule 22 (e -> ( e ) .)
    *               reduce using rule 22 (e -> ( e ) .)
    /               reduce using rule 22 (e -> ( e ) .)
    <               reduce using rule 22 (e -> ( e ) .)
    leq             reduce using rule 22 (e -> ( e ) .)
    >               reduce using rule 22 (e -> ( e ) .)
    geq             reduce using rule 22 (e -> ( e ) .)
    =               reduce using rule 22 (e -> ( e ) .)
    dif             reduce using rule 22 (e -> ( e ) .)
    ;               reduce using rule 22 (e -> ( e ) .)
    $end            reduce using rule 22 (e -> ( e ) .)
    )               reduce using rule 22 (e -> ( e ) .)
    entao           reduce using rule 22 (e -> ( e ) .)
    faca            reduce using rule 22 (e -> ( e ) .)
    ,               reduce using rule 22 (e -> ( e ) .)
    ate             reduce using rule 22 (e -> ( e ) .)


state 63

    (30) n -> ( n ) .

    or              reduce using rule 30 (n -> ( n ) .)
    and             reduce using rule 30 (n -> ( n ) .)
    xor             reduce using rule 30 (n -> ( n ) .)
    +               reduce using rule 30 (n -> ( n ) .)
    -               reduce using rule 30 (n -> ( n ) .)
    *               reduce using rule 30 (n -> ( n ) .)
    /               reduce using rule 30 (n -> ( n ) .)
    <               reduce using rule 30 (n -> ( n ) .)
    leq             reduce using rule 30 (n -> ( n ) .)
    >               reduce using rule 30 (n -> ( n ) .)
    geq             reduce using rule 30 (n -> ( n ) .)
    =               reduce using rule 30 (n -> ( n ) .)
    dif             reduce using rule 30 (n -> ( n ) .)
    ;               reduce using rule 30 (n -> ( n ) .)
    $end            reduce using rule 30 (n -> ( n ) .)
    )               reduce using rule 30 (n -> ( n ) .)
    entao           reduce using rule 30 (n -> ( n ) .)
    faca            reduce using rule 30 (n -> ( n ) .)
    ,               reduce using rule 30 (n -> ( n ) .)
    ate             reduce using rule 30 (n -> ( n ) .)


state 64

    (42) b -> e or e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 42 (b -> e or e .)
    xor             reduce using rule 42 (b -> e or e .)
    leq             reduce using rule 42 (b -> e or e .)
    geq             reduce using rule 42 (b -> e or e .)
    =               reduce using rule 42 (b -> e or e .)
    dif             reduce using rule 42 (b -> e or e .)
    ;               reduce using rule 42 (b -> e or e .)
    $end            reduce using rule 42 (b -> e or e .)
    )               reduce using rule 42 (b -> e or e .)
    entao           reduce using rule 42 (b -> e or e .)
    faca            reduce using rule 42 (b -> e or e .)
    ,               reduce using rule 42 (b -> e or e .)
    ate             reduce using rule 42 (b -> e or e .)
    and             shift and go to state 34
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 42

  ! and             [ reduce using rule 42 (b -> e or e .) ]
  ! +               [ reduce using rule 42 (b -> e or e .) ]
  ! -               [ reduce using rule 42 (b -> e or e .) ]
  ! *               [ reduce using rule 42 (b -> e or e .) ]
  ! /               [ reduce using rule 42 (b -> e or e .) ]
  ! <               [ reduce using rule 42 (b -> e or e .) ]
  ! >               [ reduce using rule 42 (b -> e or e .) ]
  ! or              [ shift and go to state 33 ]
  ! xor             [ shift and go to state 35 ]
  ! leq             [ shift and go to state 41 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 65

    (43) b -> e and e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 43 (b -> e and e .)
    and             reduce using rule 43 (b -> e and e .)
    xor             reduce using rule 43 (b -> e and e .)
    leq             reduce using rule 43 (b -> e and e .)
    geq             reduce using rule 43 (b -> e and e .)
    =               reduce using rule 43 (b -> e and e .)
    dif             reduce using rule 43 (b -> e and e .)
    ;               reduce using rule 43 (b -> e and e .)
    $end            reduce using rule 43 (b -> e and e .)
    )               reduce using rule 43 (b -> e and e .)
    entao           reduce using rule 43 (b -> e and e .)
    faca            reduce using rule 43 (b -> e and e .)
    ,               reduce using rule 43 (b -> e and e .)
    ate             reduce using rule 43 (b -> e and e .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 42

  ! +               [ reduce using rule 43 (b -> e and e .) ]
  ! -               [ reduce using rule 43 (b -> e and e .) ]
  ! *               [ reduce using rule 43 (b -> e and e .) ]
  ! /               [ reduce using rule 43 (b -> e and e .) ]
  ! <               [ reduce using rule 43 (b -> e and e .) ]
  ! >               [ reduce using rule 43 (b -> e and e .) ]
  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! leq             [ shift and go to state 41 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 66

    (44) b -> e xor e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 44 (b -> e xor e .)
    xor             reduce using rule 44 (b -> e xor e .)
    leq             reduce using rule 44 (b -> e xor e .)
    geq             reduce using rule 44 (b -> e xor e .)
    =               reduce using rule 44 (b -> e xor e .)
    dif             reduce using rule 44 (b -> e xor e .)
    ;               reduce using rule 44 (b -> e xor e .)
    $end            reduce using rule 44 (b -> e xor e .)
    )               reduce using rule 44 (b -> e xor e .)
    entao           reduce using rule 44 (b -> e xor e .)
    faca            reduce using rule 44 (b -> e xor e .)
    ,               reduce using rule 44 (b -> e xor e .)
    ate             reduce using rule 44 (b -> e xor e .)
    and             shift and go to state 34
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 42

  ! and             [ reduce using rule 44 (b -> e xor e .) ]
  ! +               [ reduce using rule 44 (b -> e xor e .) ]
  ! -               [ reduce using rule 44 (b -> e xor e .) ]
  ! *               [ reduce using rule 44 (b -> e xor e .) ]
  ! /               [ reduce using rule 44 (b -> e xor e .) ]
  ! <               [ reduce using rule 44 (b -> e xor e .) ]
  ! >               [ reduce using rule 44 (b -> e xor e .) ]
  ! or              [ shift and go to state 33 ]
  ! xor             [ shift and go to state 35 ]
  ! leq             [ shift and go to state 41 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 67

    (31) n -> e + e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 31 (n -> e + e .)
    and             reduce using rule 31 (n -> e + e .)
    xor             reduce using rule 31 (n -> e + e .)
    +               reduce using rule 31 (n -> e + e .)
    -               reduce using rule 31 (n -> e + e .)
    <               reduce using rule 31 (n -> e + e .)
    leq             reduce using rule 31 (n -> e + e .)
    >               reduce using rule 31 (n -> e + e .)
    geq             reduce using rule 31 (n -> e + e .)
    =               reduce using rule 31 (n -> e + e .)
    dif             reduce using rule 31 (n -> e + e .)
    ;               reduce using rule 31 (n -> e + e .)
    $end            reduce using rule 31 (n -> e + e .)
    )               reduce using rule 31 (n -> e + e .)
    entao           reduce using rule 31 (n -> e + e .)
    faca            reduce using rule 31 (n -> e + e .)
    ,               reduce using rule 31 (n -> e + e .)
    ate             reduce using rule 31 (n -> e + e .)
    *               shift and go to state 38
    /               shift and go to state 39

  ! *               [ reduce using rule 31 (n -> e + e .) ]
  ! /               [ reduce using rule 31 (n -> e + e .) ]
  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 68

    (32) n -> e - e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 32 (n -> e - e .)
    and             reduce using rule 32 (n -> e - e .)
    xor             reduce using rule 32 (n -> e - e .)
    +               reduce using rule 32 (n -> e - e .)
    -               reduce using rule 32 (n -> e - e .)
    <               reduce using rule 32 (n -> e - e .)
    leq             reduce using rule 32 (n -> e - e .)
    >               reduce using rule 32 (n -> e - e .)
    geq             reduce using rule 32 (n -> e - e .)
    =               reduce using rule 32 (n -> e - e .)
    dif             reduce using rule 32 (n -> e - e .)
    ;               reduce using rule 32 (n -> e - e .)
    $end            reduce using rule 32 (n -> e - e .)
    )               reduce using rule 32 (n -> e - e .)
    entao           reduce using rule 32 (n -> e - e .)
    faca            reduce using rule 32 (n -> e - e .)
    ,               reduce using rule 32 (n -> e - e .)
    ate             reduce using rule 32 (n -> e - e .)
    *               shift and go to state 38
    /               shift and go to state 39

  ! *               [ reduce using rule 32 (n -> e - e .) ]
  ! /               [ reduce using rule 32 (n -> e - e .) ]
  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 69

    (33) n -> e * e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 33 (n -> e * e .)
    and             reduce using rule 33 (n -> e * e .)
    xor             reduce using rule 33 (n -> e * e .)
    +               reduce using rule 33 (n -> e * e .)
    -               reduce using rule 33 (n -> e * e .)
    *               reduce using rule 33 (n -> e * e .)
    /               reduce using rule 33 (n -> e * e .)
    <               reduce using rule 33 (n -> e * e .)
    leq             reduce using rule 33 (n -> e * e .)
    >               reduce using rule 33 (n -> e * e .)
    geq             reduce using rule 33 (n -> e * e .)
    =               reduce using rule 33 (n -> e * e .)
    dif             reduce using rule 33 (n -> e * e .)
    ;               reduce using rule 33 (n -> e * e .)
    $end            reduce using rule 33 (n -> e * e .)
    )               reduce using rule 33 (n -> e * e .)
    entao           reduce using rule 33 (n -> e * e .)
    faca            reduce using rule 33 (n -> e * e .)
    ,               reduce using rule 33 (n -> e * e .)
    ate             reduce using rule 33 (n -> e * e .)

  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 70

    (34) n -> e / e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 34 (n -> e / e .)
    and             reduce using rule 34 (n -> e / e .)
    xor             reduce using rule 34 (n -> e / e .)
    +               reduce using rule 34 (n -> e / e .)
    -               reduce using rule 34 (n -> e / e .)
    *               reduce using rule 34 (n -> e / e .)
    /               reduce using rule 34 (n -> e / e .)
    <               reduce using rule 34 (n -> e / e .)
    leq             reduce using rule 34 (n -> e / e .)
    >               reduce using rule 34 (n -> e / e .)
    geq             reduce using rule 34 (n -> e / e .)
    =               reduce using rule 34 (n -> e / e .)
    dif             reduce using rule 34 (n -> e / e .)
    ;               reduce using rule 34 (n -> e / e .)
    $end            reduce using rule 34 (n -> e / e .)
    )               reduce using rule 34 (n -> e / e .)
    entao           reduce using rule 34 (n -> e / e .)
    faca            reduce using rule 34 (n -> e / e .)
    ,               reduce using rule 34 (n -> e / e .)
    ate             reduce using rule 34 (n -> e / e .)

  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 71

    (35) n -> e < e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 35 (n -> e < e .)
    and             reduce using rule 35 (n -> e < e .)
    xor             reduce using rule 35 (n -> e < e .)
    <               reduce using rule 35 (n -> e < e .)
    leq             reduce using rule 35 (n -> e < e .)
    >               reduce using rule 35 (n -> e < e .)
    geq             reduce using rule 35 (n -> e < e .)
    =               reduce using rule 35 (n -> e < e .)
    dif             reduce using rule 35 (n -> e < e .)
    ;               reduce using rule 35 (n -> e < e .)
    $end            reduce using rule 35 (n -> e < e .)
    )               reduce using rule 35 (n -> e < e .)
    entao           reduce using rule 35 (n -> e < e .)
    faca            reduce using rule 35 (n -> e < e .)
    ,               reduce using rule 35 (n -> e < e .)
    ate             reduce using rule 35 (n -> e < e .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! +               [ reduce using rule 35 (n -> e < e .) ]
  ! -               [ reduce using rule 35 (n -> e < e .) ]
  ! *               [ reduce using rule 35 (n -> e < e .) ]
  ! /               [ reduce using rule 35 (n -> e < e .) ]
  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 72

    (36) n -> e leq e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for xor resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for leq resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for geq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for dif resolved as shift
    ;               reduce using rule 36 (n -> e leq e .)
    $end            reduce using rule 36 (n -> e leq e .)
    )               reduce using rule 36 (n -> e leq e .)
    entao           reduce using rule 36 (n -> e leq e .)
    faca            reduce using rule 36 (n -> e leq e .)
    ,               reduce using rule 36 (n -> e leq e .)
    ate             reduce using rule 36 (n -> e leq e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45

  ! or              [ reduce using rule 36 (n -> e leq e .) ]
  ! and             [ reduce using rule 36 (n -> e leq e .) ]
  ! xor             [ reduce using rule 36 (n -> e leq e .) ]
  ! +               [ reduce using rule 36 (n -> e leq e .) ]
  ! -               [ reduce using rule 36 (n -> e leq e .) ]
  ! *               [ reduce using rule 36 (n -> e leq e .) ]
  ! /               [ reduce using rule 36 (n -> e leq e .) ]
  ! <               [ reduce using rule 36 (n -> e leq e .) ]
  ! leq             [ reduce using rule 36 (n -> e leq e .) ]
  ! >               [ reduce using rule 36 (n -> e leq e .) ]
  ! geq             [ reduce using rule 36 (n -> e leq e .) ]
  ! =               [ reduce using rule 36 (n -> e leq e .) ]
  ! dif             [ reduce using rule 36 (n -> e leq e .) ]


state 73

    (37) n -> e > e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    or              reduce using rule 37 (n -> e > e .)
    and             reduce using rule 37 (n -> e > e .)
    xor             reduce using rule 37 (n -> e > e .)
    <               reduce using rule 37 (n -> e > e .)
    leq             reduce using rule 37 (n -> e > e .)
    >               reduce using rule 37 (n -> e > e .)
    geq             reduce using rule 37 (n -> e > e .)
    =               reduce using rule 37 (n -> e > e .)
    dif             reduce using rule 37 (n -> e > e .)
    ;               reduce using rule 37 (n -> e > e .)
    $end            reduce using rule 37 (n -> e > e .)
    )               reduce using rule 37 (n -> e > e .)
    entao           reduce using rule 37 (n -> e > e .)
    faca            reduce using rule 37 (n -> e > e .)
    ,               reduce using rule 37 (n -> e > e .)
    ate             reduce using rule 37 (n -> e > e .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! +               [ reduce using rule 37 (n -> e > e .) ]
  ! -               [ reduce using rule 37 (n -> e > e .) ]
  ! *               [ reduce using rule 37 (n -> e > e .) ]
  ! /               [ reduce using rule 37 (n -> e > e .) ]
  ! or              [ shift and go to state 33 ]
  ! and             [ shift and go to state 34 ]
  ! xor             [ shift and go to state 35 ]
  ! <               [ shift and go to state 40 ]
  ! leq             [ shift and go to state 41 ]
  ! >               [ shift and go to state 42 ]
  ! geq             [ shift and go to state 43 ]
  ! =               [ shift and go to state 44 ]
  ! dif             [ shift and go to state 45 ]


state 74

    (38) n -> e geq e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for xor resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for leq resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for geq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for dif resolved as shift
    ;               reduce using rule 38 (n -> e geq e .)
    $end            reduce using rule 38 (n -> e geq e .)
    )               reduce using rule 38 (n -> e geq e .)
    entao           reduce using rule 38 (n -> e geq e .)
    faca            reduce using rule 38 (n -> e geq e .)
    ,               reduce using rule 38 (n -> e geq e .)
    ate             reduce using rule 38 (n -> e geq e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45

  ! or              [ reduce using rule 38 (n -> e geq e .) ]
  ! and             [ reduce using rule 38 (n -> e geq e .) ]
  ! xor             [ reduce using rule 38 (n -> e geq e .) ]
  ! +               [ reduce using rule 38 (n -> e geq e .) ]
  ! -               [ reduce using rule 38 (n -> e geq e .) ]
  ! *               [ reduce using rule 38 (n -> e geq e .) ]
  ! /               [ reduce using rule 38 (n -> e geq e .) ]
  ! <               [ reduce using rule 38 (n -> e geq e .) ]
  ! leq             [ reduce using rule 38 (n -> e geq e .) ]
  ! >               [ reduce using rule 38 (n -> e geq e .) ]
  ! geq             [ reduce using rule 38 (n -> e geq e .) ]
  ! =               [ reduce using rule 38 (n -> e geq e .) ]
  ! dif             [ reduce using rule 38 (n -> e geq e .) ]


state 75

    (39) n -> e = e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for xor resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for leq resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for geq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for dif resolved as shift
    ;               reduce using rule 39 (n -> e = e .)
    $end            reduce using rule 39 (n -> e = e .)
    )               reduce using rule 39 (n -> e = e .)
    entao           reduce using rule 39 (n -> e = e .)
    faca            reduce using rule 39 (n -> e = e .)
    ,               reduce using rule 39 (n -> e = e .)
    ate             reduce using rule 39 (n -> e = e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45

  ! or              [ reduce using rule 39 (n -> e = e .) ]
  ! and             [ reduce using rule 39 (n -> e = e .) ]
  ! xor             [ reduce using rule 39 (n -> e = e .) ]
  ! +               [ reduce using rule 39 (n -> e = e .) ]
  ! -               [ reduce using rule 39 (n -> e = e .) ]
  ! *               [ reduce using rule 39 (n -> e = e .) ]
  ! /               [ reduce using rule 39 (n -> e = e .) ]
  ! <               [ reduce using rule 39 (n -> e = e .) ]
  ! leq             [ reduce using rule 39 (n -> e = e .) ]
  ! >               [ reduce using rule 39 (n -> e = e .) ]
  ! geq             [ reduce using rule 39 (n -> e = e .) ]
  ! =               [ reduce using rule 39 (n -> e = e .) ]
  ! dif             [ reduce using rule 39 (n -> e = e .) ]


state 76

    (40) n -> e dif e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for xor resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for leq resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for geq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for dif resolved as shift
    ;               reduce using rule 40 (n -> e dif e .)
    $end            reduce using rule 40 (n -> e dif e .)
    )               reduce using rule 40 (n -> e dif e .)
    entao           reduce using rule 40 (n -> e dif e .)
    faca            reduce using rule 40 (n -> e dif e .)
    ,               reduce using rule 40 (n -> e dif e .)
    ate             reduce using rule 40 (n -> e dif e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45

  ! or              [ reduce using rule 40 (n -> e dif e .) ]
  ! and             [ reduce using rule 40 (n -> e dif e .) ]
  ! xor             [ reduce using rule 40 (n -> e dif e .) ]
  ! +               [ reduce using rule 40 (n -> e dif e .) ]
  ! -               [ reduce using rule 40 (n -> e dif e .) ]
  ! *               [ reduce using rule 40 (n -> e dif e .) ]
  ! /               [ reduce using rule 40 (n -> e dif e .) ]
  ! <               [ reduce using rule 40 (n -> e dif e .) ]
  ! leq             [ reduce using rule 40 (n -> e dif e .) ]
  ! >               [ reduce using rule 40 (n -> e dif e .) ]
  ! geq             [ reduce using rule 40 (n -> e dif e .) ]
  ! =               [ reduce using rule 40 (n -> e dif e .) ]
  ! dif             [ reduce using rule 40 (n -> e dif e .) ]


state 77

    (12) comando -> escreva ( e_list . )
    (20) e_list -> e_list . , e

    )               shift and go to state 88
    ,               shift and go to state 87


state 78

    (13) comando -> leia ( var_list . )
    (49) var_list -> var_list . , var

    )               shift and go to state 89
    ,               shift and go to state 90


state 79

    (48) var_list -> var .

    )               reduce using rule 48 (var_list -> var .)
    ,               reduce using rule 48 (var_list -> var .)
    ;               reduce using rule 48 (var_list -> var .)
    $end            reduce using rule 48 (var_list -> var .)


state 80

    (14) comando -> vartype : var_list .
    (49) var_list -> var_list . , var

    ;               reduce using rule 14 (comando -> vartype : var_list .)
    $end            reduce using rule 14 (comando -> vartype : var_list .)
    ,               shift and go to state 90


state 81

    (15) comando -> se e entao . com_list ; senao com_list ; fimse
    (16) comando -> se e entao . com_list ; fimse
    (17) com_list -> . comando
    (18) com_list -> . com_list ; comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 9
    com_list                       shift and go to state 91
    comando                        shift and go to state 92
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 82

    (6) ciclo -> para var de . e ate e faca com_list ; fimpara
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 93
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 83

    (7) ciclo -> enquanto n faca . com_list ; fimenquanto
    (17) com_list -> . comando
    (18) com_list -> . com_list ; comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    n                              shift and go to state 16
    com_list                       shift and go to state 94
    comando                        shift and go to state 92
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    f                              shift and go to state 20

state 84

    (8) func -> funcao var ( args . ) com_list ; fimfuncao

    )               shift and go to state 95


state 85

    (51) args -> var_list .
    (49) var_list -> var_list . , var

    )               reduce using rule 51 (args -> var_list .)
    ,               shift and go to state 90


state 86

    (26) e -> var ( e_list ) .

    or              reduce using rule 26 (e -> var ( e_list ) .)
    and             reduce using rule 26 (e -> var ( e_list ) .)
    xor             reduce using rule 26 (e -> var ( e_list ) .)
    +               reduce using rule 26 (e -> var ( e_list ) .)
    -               reduce using rule 26 (e -> var ( e_list ) .)
    *               reduce using rule 26 (e -> var ( e_list ) .)
    /               reduce using rule 26 (e -> var ( e_list ) .)
    <               reduce using rule 26 (e -> var ( e_list ) .)
    leq             reduce using rule 26 (e -> var ( e_list ) .)
    >               reduce using rule 26 (e -> var ( e_list ) .)
    geq             reduce using rule 26 (e -> var ( e_list ) .)
    =               reduce using rule 26 (e -> var ( e_list ) .)
    dif             reduce using rule 26 (e -> var ( e_list ) .)
    ;               reduce using rule 26 (e -> var ( e_list ) .)
    $end            reduce using rule 26 (e -> var ( e_list ) .)
    )               reduce using rule 26 (e -> var ( e_list ) .)
    entao           reduce using rule 26 (e -> var ( e_list ) .)
    faca            reduce using rule 26 (e -> var ( e_list ) .)
    ,               reduce using rule 26 (e -> var ( e_list ) .)
    ate             reduce using rule 26 (e -> var ( e_list ) .)


state 87

    (20) e_list -> e_list , . e
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 96
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 88

    (12) comando -> escreva ( e_list ) .

    ;               reduce using rule 12 (comando -> escreva ( e_list ) .)
    $end            reduce using rule 12 (comando -> escreva ( e_list ) .)


state 89

    (13) comando -> leia ( var_list ) .

    ;               reduce using rule 13 (comando -> leia ( var_list ) .)
    $end            reduce using rule 13 (comando -> leia ( var_list ) .)


state 90

    (49) var_list -> var_list , . var

    var             shift and go to state 97


state 91

    (15) comando -> se e entao com_list . ; senao com_list ; fimse
    (16) comando -> se e entao com_list . ; fimse
    (18) com_list -> com_list . ; comando

    ;               shift and go to state 98


state 92

    (17) com_list -> comando .

    ;               reduce using rule 17 (com_list -> comando .)


state 93

    (6) ciclo -> para var de e . ate e faca com_list ; fimpara
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    ate             shift and go to state 99
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 94

    (7) ciclo -> enquanto n faca com_list . ; fimenquanto
    (18) com_list -> com_list . ; comando

    ;               shift and go to state 100


state 95

    (8) func -> funcao var ( args ) . com_list ; fimfuncao
    (17) com_list -> . comando
    (18) com_list -> . com_list ; comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    com_list                       shift and go to state 101
    comando                        shift and go to state 92
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 96

    (20) e_list -> e_list , e .
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    )               reduce using rule 20 (e_list -> e_list , e .)
    ,               reduce using rule 20 (e_list -> e_list , e .)
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 97

    (49) var_list -> var_list , var .

    )               reduce using rule 49 (var_list -> var_list , var .)
    ,               reduce using rule 49 (var_list -> var_list , var .)
    ;               reduce using rule 49 (var_list -> var_list , var .)
    $end            reduce using rule 49 (var_list -> var_list , var .)


state 98

    (15) comando -> se e entao com_list ; . senao com_list ; fimse
    (16) comando -> se e entao com_list ; . fimse
    (18) com_list -> com_list ; . comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    senao           shift and go to state 102
    fimse           shift and go to state 103
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 9
    comando                        shift and go to state 104
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 99

    (6) ciclo -> para var de e ate . e faca com_list ; fimpara
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 32
    (               shift and go to state 8
    string          shift and go to state 17
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 105
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 100

    (7) ciclo -> enquanto n faca com_list ; . fimenquanto
    (18) com_list -> com_list ; . comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    fimenquanto     shift and go to state 106
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    n                              shift and go to state 16
    comando                        shift and go to state 104
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    f                              shift and go to state 20

state 101

    (8) func -> funcao var ( args ) com_list . ; fimfuncao
    (18) com_list -> com_list . ; comando

    ;               shift and go to state 107


state 102

    (15) comando -> se e entao com_list ; senao . com_list ; fimse
    (17) com_list -> . comando
    (18) com_list -> . com_list ; comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 9
    com_list                       shift and go to state 108
    comando                        shift and go to state 92
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 103

    (16) comando -> se e entao com_list ; fimse .

    ;               reduce using rule 16 (comando -> se e entao com_list ; fimse .)
    $end            reduce using rule 16 (comando -> se e entao com_list ; fimse .)


state 104

    (18) com_list -> com_list ; comando .

    ;               reduce using rule 18 (com_list -> com_list ; comando .)


state 105

    (6) ciclo -> para var de e ate e . faca com_list ; fimpara
    (42) b -> e . or e
    (43) b -> e . and e
    (44) b -> e . xor e
    (31) n -> e . + e
    (32) n -> e . - e
    (33) n -> e . * e
    (34) n -> e . / e
    (35) n -> e . < e
    (36) n -> e . leq e
    (37) n -> e . > e
    (38) n -> e . geq e
    (39) n -> e . = e
    (40) n -> e . dif e

    faca            shift and go to state 109
    or              shift and go to state 33
    and             shift and go to state 34
    xor             shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    <               shift and go to state 40
    leq             shift and go to state 41
    >               shift and go to state 42
    geq             shift and go to state 43
    =               shift and go to state 44
    dif             shift and go to state 45


state 106

    (7) ciclo -> enquanto n faca com_list ; fimenquanto .

    ;               reduce using rule 7 (ciclo -> enquanto n faca com_list ; fimenquanto .)
    $end            reduce using rule 7 (ciclo -> enquanto n faca com_list ; fimenquanto .)


state 107

    (8) func -> funcao var ( args ) com_list ; . fimfuncao
    (18) com_list -> com_list ; . comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    fimfuncao       shift and go to state 110
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    comando                        shift and go to state 104
    e                              shift and go to state 9
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 108

    (15) comando -> se e entao com_list ; senao com_list . ; fimse
    (18) com_list -> com_list . ; comando

    ;               shift and go to state 111


state 109

    (6) ciclo -> para var de e ate e faca . com_list ; fimpara
    (17) com_list -> . comando
    (18) com_list -> . com_list ; comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 9
    com_list                       shift and go to state 112
    comando                        shift and go to state 92
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 110

    (8) func -> funcao var ( args ) com_list ; fimfuncao .

    ;               reduce using rule 8 (func -> funcao var ( args ) com_list ; fimfuncao .)
    $end            reduce using rule 8 (func -> funcao var ( args ) com_list ; fimfuncao .)


state 111

    (15) comando -> se e entao com_list ; senao com_list ; . fimse
    (18) com_list -> com_list ; . comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    fimse           shift and go to state 113
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 9
    comando                        shift and go to state 104
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 112

    (6) ciclo -> para var de e ate e faca com_list . ; fimpara
    (18) com_list -> com_list . ; comando

    ;               shift and go to state 114


state 113

    (15) comando -> se e entao com_list ; senao com_list ; fimse .

    ;               reduce using rule 15 (comando -> se e entao com_list ; senao com_list ; fimse .)
    $end            reduce using rule 15 (comando -> se e entao com_list ; senao com_list ; fimse .)


state 114

    (6) ciclo -> para var de e ate e faca com_list ; . fimpara
    (18) com_list -> com_list ; . comando
    (9) comando -> . e
    (10) comando -> . ciclo
    (11) comando -> . var assign e
    (12) comando -> . escreva ( e_list )
    (13) comando -> . leia ( var_list )
    (14) comando -> . vartype : var_list
    (15) comando -> . se e entao com_list ; senao com_list ; fimse
    (16) comando -> . se e entao com_list ; fimse
    (21) e -> . var
    (22) e -> . ( e )
    (23) e -> . b
    (24) e -> . n
    (25) e -> . string
    (26) e -> . var ( e_list )
    (27) e -> . var ( )
    (6) ciclo -> . para var de e ate e faca com_list ; fimpara
    (7) ciclo -> . enquanto n faca com_list ; fimenquanto
    (41) b -> . f
    (42) b -> . e or e
    (43) b -> . e and e
    (44) b -> . e xor e
    (28) n -> . nr
    (29) n -> . - e
    (30) n -> . ( n )
    (31) n -> . e + e
    (32) n -> . e - e
    (33) n -> . e * e
    (34) n -> . e / e
    (35) n -> . e < e
    (36) n -> . e leq e
    (37) n -> . e > e
    (38) n -> . e geq e
    (39) n -> . e = e
    (40) n -> . e dif e
    (45) f -> . true
    (46) f -> . false
    (47) f -> . not f

    fimpara         shift and go to state 115
    var             shift and go to state 7
    escreva         shift and go to state 11
    leia            shift and go to state 12
    vartype         shift and go to state 13
    se              shift and go to state 14
    (               shift and go to state 8
    string          shift and go to state 17
    para            shift and go to state 18
    enquanto        shift and go to state 19
    nr              shift and go to state 21
    -               shift and go to state 22
    true            shift and go to state 23
    false           shift and go to state 24
    not             shift and go to state 25

    e                              shift and go to state 9
    comando                        shift and go to state 104
    ciclo                          shift and go to state 10
    b                              shift and go to state 15
    n                              shift and go to state 16
    f                              shift and go to state 20

state 115

    (6) ciclo -> para var de e ate e faca com_list ; fimpara .

    ;               reduce using rule 6 (ciclo -> para var de e ate e faca com_list ; fimpara .)
    $end            reduce using rule 6 (ciclo -> para var de e ate e faca com_list ; fimpara .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 31 resolved as shift
WARNING: shift/reduce conflict for or in state 72 resolved as shift
WARNING: shift/reduce conflict for and in state 72 resolved as shift
WARNING: shift/reduce conflict for xor in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for * in state 72 resolved as shift
WARNING: shift/reduce conflict for / in state 72 resolved as shift
WARNING: shift/reduce conflict for < in state 72 resolved as shift
WARNING: shift/reduce conflict for leq in state 72 resolved as shift
WARNING: shift/reduce conflict for > in state 72 resolved as shift
WARNING: shift/reduce conflict for geq in state 72 resolved as shift
WARNING: shift/reduce conflict for = in state 72 resolved as shift
WARNING: shift/reduce conflict for dif in state 72 resolved as shift
WARNING: shift/reduce conflict for or in state 74 resolved as shift
WARNING: shift/reduce conflict for and in state 74 resolved as shift
WARNING: shift/reduce conflict for xor in state 74 resolved as shift
WARNING: shift/reduce conflict for + in state 74 resolved as shift
WARNING: shift/reduce conflict for - in state 74 resolved as shift
WARNING: shift/reduce conflict for * in state 74 resolved as shift
WARNING: shift/reduce conflict for / in state 74 resolved as shift
WARNING: shift/reduce conflict for < in state 74 resolved as shift
WARNING: shift/reduce conflict for leq in state 74 resolved as shift
WARNING: shift/reduce conflict for > in state 74 resolved as shift
WARNING: shift/reduce conflict for geq in state 74 resolved as shift
WARNING: shift/reduce conflict for = in state 74 resolved as shift
WARNING: shift/reduce conflict for dif in state 74 resolved as shift
WARNING: shift/reduce conflict for or in state 75 resolved as shift
WARNING: shift/reduce conflict for and in state 75 resolved as shift
WARNING: shift/reduce conflict for xor in state 75 resolved as shift
WARNING: shift/reduce conflict for + in state 75 resolved as shift
WARNING: shift/reduce conflict for - in state 75 resolved as shift
WARNING: shift/reduce conflict for * in state 75 resolved as shift
WARNING: shift/reduce conflict for / in state 75 resolved as shift
WARNING: shift/reduce conflict for < in state 75 resolved as shift
WARNING: shift/reduce conflict for leq in state 75 resolved as shift
WARNING: shift/reduce conflict for > in state 75 resolved as shift
WARNING: shift/reduce conflict for geq in state 75 resolved as shift
WARNING: shift/reduce conflict for = in state 75 resolved as shift
WARNING: shift/reduce conflict for dif in state 75 resolved as shift
WARNING: shift/reduce conflict for or in state 76 resolved as shift
WARNING: shift/reduce conflict for and in state 76 resolved as shift
WARNING: shift/reduce conflict for xor in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for * in state 76 resolved as shift
WARNING: shift/reduce conflict for / in state 76 resolved as shift
WARNING: shift/reduce conflict for < in state 76 resolved as shift
WARNING: shift/reduce conflict for leq in state 76 resolved as shift
WARNING: shift/reduce conflict for > in state 76 resolved as shift
WARNING: shift/reduce conflict for geq in state 76 resolved as shift
WARNING: shift/reduce conflict for = in state 76 resolved as shift
WARNING: shift/reduce conflict for dif in state 76 resolved as shift
