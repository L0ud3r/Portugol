
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/rightuminusleftorxorleftandand assign ate de endfun escreva faca false fimpara fun not nr or para read string true var xor code : s  code : code ';' s  ciclo : para var de e ate e faca com_list ';' fimpara  func : fun var '(' args ')' com_list ';' endfun  comando : e\n                    | ciclo  comando : var assign e  comando : escreva '(' e_list ')'  comando : read var_list  s : func\n              | comando  e_list : e\n                   | e_list ',' e  n : nr\n              | '-' e  %prec uminus   n : e '+' e\n              | e '-' e\n              | e '*' e\n              | e '/' e  b : f\n              | e or e\n              | e and e\n              | e xor e  f : true  f : false  f : not f  e : var  e : '(' e ')'  e : b\n              | n\n              | string  e : var '(' e_list ')'\n              | var '(' ')'  com_list : comando\n                     | com_list ';' comando  var_list : var\n                     | var_list ',' var  args :\n                 | var_list "
    
_lr_action_items = {'fun':([0,22,],[5,5,]),'var':([0,5,7,11,15,18,22,24,25,28,29,30,31,32,33,34,35,42,56,57,61,65,67,71,72,76,],[6,23,27,37,38,27,6,27,27,27,27,27,27,27,27,27,27,37,63,27,27,6,27,6,6,6,]),'escreva':([0,22,65,71,72,76,],[10,10,10,10,10,10,]),'read':([0,22,65,71,72,76,],[11,11,11,11,11,11,]),'(':([0,6,7,10,18,22,23,24,25,27,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[7,25,7,35,7,7,42,7,7,25,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'string':([0,7,18,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'para':([0,22,65,71,72,76,],[15,15,15,15,15,15,]),'nr':([0,7,18,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'-':([0,6,7,8,12,13,14,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,39,40,43,45,46,47,48,49,50,51,52,53,54,57,60,61,64,65,66,67,70,71,72,76,],[18,-27,18,32,-29,-30,-31,-20,-14,18,-24,-25,18,18,18,32,-27,18,18,18,18,18,18,18,18,-15,-26,32,-33,32,-28,-21,-22,-23,-16,-17,-18,-19,18,-32,18,32,18,32,18,32,18,18,18,]),'true':([0,7,18,21,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'false':([0,7,18,21,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'not':([0,7,18,21,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'$end':([1,2,3,4,6,8,9,12,13,14,16,17,19,20,27,36,37,39,40,41,43,45,47,48,49,50,51,52,53,54,60,62,63,73,77,],[0,-1,-10,-11,-27,-5,-6,-29,-30,-31,-20,-14,-24,-25,-27,-9,-36,-15,-26,-2,-7,-33,-28,-21,-22,-23,-16,-17,-18,-19,-32,-8,-37,-4,-3,]),';':([1,2,3,4,6,8,9,12,13,14,16,17,19,20,27,36,37,39,40,41,43,45,47,48,49,50,51,52,53,54,60,62,63,68,69,73,74,75,77,],[22,-1,-10,-11,-27,-5,-6,-29,-30,-31,-20,-14,-24,-25,-27,-9,-36,-15,-26,-2,-7,-33,-28,-21,-22,-23,-16,-17,-18,-19,-32,-8,-37,71,-34,-4,-35,76,-3,]),'assign':([6,],[24,]),'or':([6,8,12,13,14,16,17,19,20,26,27,39,40,43,45,46,47,48,49,50,51,52,53,54,60,64,66,70,],[-27,28,-29,-30,-31,-20,-14,-24,-25,28,-27,28,-26,28,-33,28,-28,-21,-22,-23,28,28,28,28,-32,28,28,28,]),'and':([6,8,12,13,14,16,17,19,20,26,27,39,40,43,45,46,47,48,49,50,51,52,53,54,60,64,66,70,],[-27,29,-29,-30,-31,-20,-14,-24,-25,29,-27,29,-26,29,-33,29,-28,29,-22,29,29,29,29,29,-32,29,29,29,]),'xor':([6,8,12,13,14,16,17,19,20,26,27,39,40,43,45,46,47,48,49,50,51,52,53,54,60,64,66,70,],[-27,30,-29,-30,-31,-20,-14,-24,-25,30,-27,30,-26,30,-33,30,-28,-21,-22,-23,30,30,30,30,-32,30,30,30,]),'+':([6,8,12,13,14,16,17,19,20,26,27,39,40,43,45,46,47,48,49,50,51,52,53,54,60,64,66,70,],[-27,31,-29,-30,-31,-20,-14,-24,-25,31,-27,-15,-26,31,-33,31,-28,-21,-22,-23,-16,-17,-18,-19,-32,31,31,31,]),'*':([6,8,12,13,14,16,17,19,20,26,27,39,40,43,45,46,47,48,49,50,51,52,53,54,60,64,66,70,],[-27,33,-29,-30,-31,-20,-14,-24,-25,33,-27,-15,-26,33,-33,33,-28,-21,-22,-23,33,33,-18,-19,-32,33,33,33,]),'/':([6,8,12,13,14,16,17,19,20,26,27,39,40,43,45,46,47,48,49,50,51,52,53,54,60,64,66,70,],[-27,34,-29,-30,-31,-20,-14,-24,-25,34,-27,-15,-26,34,-33,34,-28,-21,-22,-23,34,34,-18,-19,-32,34,34,34,]),')':([12,13,14,16,17,19,20,25,26,27,37,39,40,42,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,63,66,],[-29,-30,-31,-20,-14,-24,-25,45,47,-27,-36,-15,-26,-38,60,-33,-12,-28,-21,-22,-23,-16,-17,-18,-19,62,65,-39,-32,-37,-13,]),',':([12,13,14,16,17,19,20,27,36,37,39,40,44,45,46,47,48,49,50,51,52,53,54,55,59,60,63,66,],[-29,-30,-31,-20,-14,-24,-25,-27,56,-36,-15,-26,61,-33,-12,-28,-21,-22,-23,-16,-17,-18,-19,61,56,-32,-37,-13,]),'ate':([12,13,14,16,17,19,20,27,39,40,45,47,48,49,50,51,52,53,54,60,64,],[-29,-30,-31,-20,-14,-24,-25,-27,-15,-26,-33,-28,-21,-22,-23,-16,-17,-18,-19,-32,67,]),'faca':([12,13,14,16,17,19,20,27,39,40,45,47,48,49,50,51,52,53,54,60,70,],[-29,-30,-31,-20,-14,-24,-25,-27,-15,-26,-33,-28,-21,-22,-23,-16,-17,-18,-19,-32,72,]),'de':([38,],[57,]),'endfun':([71,],[73,]),'fimpara':([76,],[77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'s':([0,22,],[2,41,]),'func':([0,22,],[3,3,]),'comando':([0,22,65,71,72,76,],[4,4,69,74,69,74,]),'e':([0,7,18,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[8,26,39,8,43,46,48,49,50,51,52,53,54,46,64,66,8,70,8,8,8,]),'ciclo':([0,22,65,71,72,76,],[9,9,9,9,9,9,]),'b':([0,7,18,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'n':([0,7,18,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'f':([0,7,18,21,22,24,25,28,29,30,31,32,33,34,35,57,61,65,67,71,72,76,],[16,16,16,40,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'var_list':([11,42,],[36,59,]),'e_list':([25,35,],[44,55,]),'args':([42,],[58,]),'com_list':([65,72,],[68,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> s','code',1,'p_code1','logic_grammar.py',25),
  ('code -> code ; s','code',3,'p_code2','logic_grammar.py',29),
  ('ciclo -> para var de e ate e faca com_list ; fimpara','ciclo',10,'p_ciclo','logic_grammar.py',44),
  ('func -> fun var ( args ) com_list ; endfun','func',8,'p_func','logic_grammar.py',52),
  ('comando -> e','comando',1,'p_comando1','logic_grammar.py',62),
  ('comando -> ciclo','comando',1,'p_comando1','logic_grammar.py',63),
  ('comando -> var assign e','comando',3,'p_comando2','logic_grammar.py',67),
  ('comando -> escreva ( e_list )','comando',4,'p_comando3','logic_grammar.py',71),
  ('comando -> read var_list','comando',2,'p_comando4','logic_grammar.py',75),
  ('s -> func','s',1,'p_s','logic_grammar.py',82),
  ('s -> comando','s',1,'p_s','logic_grammar.py',83),
  ('e_list -> e','e_list',1,'p_e_list','logic_grammar.py',89),
  ('e_list -> e_list , e','e_list',3,'p_e_list','logic_grammar.py',90),
  ('n -> nr','n',1,'p_n1','logic_grammar.py',98),
  ('n -> - e','n',2,'p_n1','logic_grammar.py',99),
  ('n -> e + e','n',3,'p_n2','logic_grammar.py',103),
  ('n -> e - e','n',3,'p_n2','logic_grammar.py',104),
  ('n -> e * e','n',3,'p_n2','logic_grammar.py',105),
  ('n -> e / e','n',3,'p_n2','logic_grammar.py',106),
  ('b -> f','b',1,'p_b1','logic_grammar.py',112),
  ('b -> e or e','b',3,'p_b1','logic_grammar.py',113),
  ('b -> e and e','b',3,'p_b1','logic_grammar.py',114),
  ('b -> e xor e','b',3,'p_b1','logic_grammar.py',115),
  ('f -> true','f',1,'p_f1','logic_grammar.py',124),
  ('f -> false','f',1,'p_f2','logic_grammar.py',128),
  ('f -> not f','f',2,'p_f3','logic_grammar.py',132),
  ('e -> var','e',1,'p_e1','logic_grammar.py',138),
  ('e -> ( e )','e',3,'p_e2','logic_grammar.py',142),
  ('e -> b','e',1,'p_e3','logic_grammar.py',146),
  ('e -> n','e',1,'p_e3','logic_grammar.py',147),
  ('e -> string','e',1,'p_e3','logic_grammar.py',148),
  ('e -> var ( e_list )','e',4,'p_e4','logic_grammar.py',152),
  ('e -> var ( )','e',3,'p_e4','logic_grammar.py',153),
  ('com_list -> comando','com_list',1,'p_com_list','logic_grammar.py',161),
  ('com_list -> com_list ; comando','com_list',3,'p_com_list','logic_grammar.py',162),
  ('var_list -> var','var_list',1,'p_var_list','logic_grammar.py',172),
  ('var_list -> var_list , var','var_list',3,'p_var_list','logic_grammar.py',173),
  ('args -> <empty>','args',0,'p_args','logic_grammar.py',183),
  ('args -> var_list','args',1,'p_args','logic_grammar.py',184),
]
